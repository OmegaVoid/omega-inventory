// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
	"github.com/bwmarrin/snowflake"
)

type Node interface {
	IsNode()
}

type FootprintAttachment struct {
	ID   snowflake.ID   `json:"id"`
	File graphql.Upload `json:"file"`
}

func (FootprintAttachment) IsNode() {}

type FootprintAttachmentInput struct {
	IsImage bool           `json:"isImage"`
	File    graphql.Upload `json:"file"`
}

type FootprintCategoryInput struct {
	Name        string        `json:"name"`
	Description *string       `json:"description"`
	Parent      *snowflake.ID `json:"parent"`
}

type FootprintInput struct {
	Name        string        `json:"name"`
	Description *string       `json:"description"`
	Image       *snowflake.ID `json:"image"`
	Category    *snowflake.ID `json:"category"`
}

type PartAttachment struct {
	ID      snowflake.ID   `json:"id"`
	IsImage bool           `json:"isImage"`
	File    graphql.Upload `json:"file"`
}

func (PartAttachment) IsNode() {}

type PartAttachmentInput struct {
	IsImage bool           `json:"isImage"`
	File    graphql.Upload `json:"file"`
}

type PartCategoryInput struct {
	Name        string        `json:"name"`
	Description *string       `json:"description"`
	Parent      *snowflake.ID `json:"parent"`
}

type PartInput struct {
	Name               string          `json:"name"`
	Category           snowflake.ID    `json:"category"`
	Description        *string         `json:"description"`
	Footprint          snowflake.ID    `json:"footprint"`
	Unit               snowflake.ID    `json:"unit"`
	StorageLocation    snowflake.ID    `json:"storageLocation"`
	Attachments        []*snowflake.ID `json:"attachments"`
	Comment            *string         `json:"comment"`
	StockLevel         float64         `json:"stockLevel"`
	MinStockLevel      float64         `json:"minStockLevel"`
	Parameters         []*snowflake.ID `json:"parameters"`
	InternalPartNumber string          `json:"internalPartNumber"`
}

type PartMeasurementUnit struct {
	ID        snowflake.ID `json:"id"`
	Name      string       `json:"name"`
	ShortName string       `json:"shortName"`
	Default   bool         `json:"default"`
}

func (PartMeasurementUnit) IsNode() {}

type PartMeasurementUnitInput struct {
	Name      string `json:"name"`
	ShortName string `json:"shortName"`
}

type PartParameterInput struct {
	Part        snowflake.ID `json:"part"`
	Name        string       `json:"name"`
	Description *string      `json:"description"`
	Unit        snowflake.ID `json:"unit"`
	Value       *float64     `json:"value"`
	MaxValue    *float64     `json:"maxValue"`
	MinValue    *float64     `json:"minValue"`
	StringValue *string      `json:"stringValue"`
	ValueType   ValueType    `json:"valueType"`
	SiPrefix    snowflake.ID `json:"siPrefix"`
	MinSiPrefix snowflake.ID `json:"minSiPrefix"`
	MaxSiPrefix snowflake.ID `json:"maxSiPrefix"`
}

type QuerySiPrefixInput struct {
	Symbol   *string `json:"symbol"`
	Prefix   *string `json:"prefix"`
	Exponent *int    `json:"exponent"`
	Base     *int    `json:"base"`
}

type QueryUnitInput struct {
	Name     *string        `json:"name"`
	Symbol   *string        `json:"symbol"`
	Prefixes []snowflake.ID `json:"prefixes"`
}

type SiPrefix struct {
	ID       snowflake.ID `json:"id"`
	Symbol   string       `json:"symbol"`
	Prefix   string       `json:"prefix"`
	Exponent int          `json:"exponent"`
	Base     int          `json:"base"`
}

func (SiPrefix) IsNode() {}

type SiPrefixInput struct {
	Symbol   string `json:"symbol"`
	Prefix   string `json:"prefix"`
	Exponent int    `json:"exponent"`
	Base     int    `json:"base"`
}

type StorageLocationCategoryInput struct {
	Parent      *snowflake.ID `json:"parent"`
	Name        string        `json:"name"`
	Description *string       `json:"description"`
}

type StorageLocationImage struct {
	ID   snowflake.ID   `json:"id"`
	File graphql.Upload `json:"file"`
}

func (StorageLocationImage) IsNode() {}

type StorageLocationImageInput struct {
	File graphql.Upload `json:"file"`
}

type StorageLocationInput struct {
	Name     string                     `json:"name"`
	Image    *StorageLocationImageInput `json:"Image"`
	Category snowflake.ID               `json:"category"`
}

type UnitInput struct {
	Name     string          `json:"name"`
	Symbol   string          `json:"symbol"`
	Prefixes []*snowflake.ID `json:"prefixes"`
}

type ValueType string

const (
	ValueTypeString ValueType = "STRING"
	ValueTypeNumber ValueType = "NUMBER"
)

var AllValueType = []ValueType{
	ValueTypeString,
	ValueTypeNumber,
}

func (e ValueType) IsValid() bool {
	switch e {
	case ValueTypeString, ValueTypeNumber:
		return true
	}
	return false
}

func (e ValueType) String() string {
	return string(e)
}

func (e *ValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ValueType", str)
	}
	return nil
}

func (e ValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
