// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	graphql1 "github.com/OmegaVoid/omega-inventory/pkg/graphql"
	"github.com/OmegaVoid/omega-inventory/pkg/model"
	"github.com/bwmarrin/snowflake"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Footprint() FootprintResolver
	FootprintCategory() FootprintCategoryResolver
	Mutation() MutationResolver
	Part() PartResolver
	PartCategory() PartCategoryResolver
	PartParameter() PartParameterResolver
	Query() QueryResolver
	StorageLocation() StorageLocationResolver
	StorageLocationCategory() StorageLocationCategoryResolver
	Unit() UnitResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Footprint struct {
		Attachments func(childComplexity int) int
		Category    func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Image       func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	FootprintAttachment struct {
		File func(childComplexity int) int
		ID   func(childComplexity int) int
	}

	FootprintCategory struct {
		Children    func(childComplexity int) int
		Description func(childComplexity int) int
		Footprints  func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Parent      func(childComplexity int) int
	}

	Mutation struct {
		CreateFootprint               func(childComplexity int, input model.FootprintInput) int
		CreateFootprintAttachment     func(childComplexity int, input model.FootprintAttachmentInput) int
		CreateFootprintCategory       func(childComplexity int, input model.FootprintCategoryInput) int
		CreatePart                    func(childComplexity int, input model.PartInput) int
		CreatePartAttachment          func(childComplexity int, input model.PartAttachmentInput) int
		CreatePartCategory            func(childComplexity int, input model.PartCategoryInput) int
		CreatePartMeasurementUnit     func(childComplexity int, input model.PartMeasurementUnitInput) int
		CreatePartParameter           func(childComplexity int, input model.PartParameterInput) int
		CreateSiPrefix                func(childComplexity int, input model.SiPrefixInput) int
		CreateStorageLocation         func(childComplexity int, input model.StorageLocationInput) int
		CreateStorageLocationCategory func(childComplexity int, input model.StorageLocationCategoryInput) int
		CreateStorageLocationImage    func(childComplexity int, input model.StorageLocationImageInput) int
		CreateUnit                    func(childComplexity int, input model.UnitInput) int
		DeleteFootprint               func(childComplexity int, id snowflake.ID) int
		DeleteFootprintAttachment     func(childComplexity int, id snowflake.ID) int
		DeleteFootprintCategory       func(childComplexity int, id snowflake.ID) int
		DeletePart                    func(childComplexity int, id snowflake.ID) int
		DeletePartAttachment          func(childComplexity int, id snowflake.ID) int
		DeletePartCategory            func(childComplexity int, id snowflake.ID) int
		DeletePartMeasurementUnit     func(childComplexity int, id snowflake.ID) int
		DeletePartParameter           func(childComplexity int, id snowflake.ID) int
		DeleteSiPrefix                func(childComplexity int, id snowflake.ID) int
		DeleteStorageLocation         func(childComplexity int, id snowflake.ID) int
		DeleteStorageLocationCategory func(childComplexity int, id snowflake.ID) int
		DeleteStorageLocationImage    func(childComplexity int, id snowflake.ID) int
		DeleteUnit                    func(childComplexity int, id snowflake.ID) int
		UpdateFootprint               func(childComplexity int, id snowflake.ID, input model.FootprintInput) int
		UpdateFootprintAttachment     func(childComplexity int, id snowflake.ID, input model.FootprintAttachmentInput) int
		UpdateFootprintCategory       func(childComplexity int, id snowflake.ID, input model.FootprintCategoryInput) int
		UpdatePart                    func(childComplexity int, id snowflake.ID, input model.PartInput) int
		UpdatePartAttachment          func(childComplexity int, id snowflake.ID, input model.PartAttachmentInput) int
		UpdatePartCategory            func(childComplexity int, id snowflake.ID, input model.PartCategoryInput) int
		UpdatePartMeasurementUnit     func(childComplexity int, id snowflake.ID, input model.PartMeasurementUnitInput) int
		UpdatePartParameter           func(childComplexity int, id snowflake.ID, input model.PartParameterInput) int
		UpdateSiPrefix                func(childComplexity int, id snowflake.ID, input model.SiPrefixInput) int
		UpdateStorageLocation         func(childComplexity int, id snowflake.ID, input model.StorageLocationInput) int
		UpdateStorageLocationCategory func(childComplexity int, id snowflake.ID, input model.StorageLocationCategoryInput) int
		UpdateStorageLocationImage    func(childComplexity int, id snowflake.ID, input model.StorageLocationImageInput) int
		UpdateUnit                    func(childComplexity int, id snowflake.ID, input model.UnitInput) int
	}

	Part struct {
		Attachments        func(childComplexity int) int
		Category           func(childComplexity int) int
		Comment            func(childComplexity int) int
		Description        func(childComplexity int) int
		Footprint          func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalPartNumber func(childComplexity int) int
		MinStockLevel      func(childComplexity int) int
		Name               func(childComplexity int) int
		Parameters         func(childComplexity int) int
		StockLevel         func(childComplexity int) int
		StorageLocation    func(childComplexity int) int
		Unit               func(childComplexity int) int
	}

	PartAttachment struct {
		File    func(childComplexity int) int
		ID      func(childComplexity int) int
		IsImage func(childComplexity int) int
	}

	PartCategory struct {
		Children    func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Parent      func(childComplexity int) int
		Parts       func(childComplexity int) int
		Root        func(childComplexity int) int
	}

	PartMeasurementUnit struct {
		Default   func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		ShortName func(childComplexity int) int
	}

	PartParameter struct {
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		MaxSiPrefix        func(childComplexity int) int
		MaxValue           func(childComplexity int) int
		MinSiPrefix        func(childComplexity int) int
		MinValue           func(childComplexity int) int
		Name               func(childComplexity int) int
		NormalizedMaxValue func(childComplexity int) int
		NormalizedMinValue func(childComplexity int) int
		NormalizedValue    func(childComplexity int) int
		Part               func(childComplexity int) int
		SiPrefix           func(childComplexity int) int
		StringValue        func(childComplexity int) int
		Unit               func(childComplexity int) int
		Value              func(childComplexity int) int
		ValueType          func(childComplexity int) int
	}

	Query struct {
		Footprint                 func(childComplexity int, id snowflake.ID) int
		FootprintAttachment       func(childComplexity int, id snowflake.ID) int
		FootprintAttachments      func(childComplexity int) int
		FootprintCategories       func(childComplexity int) int
		FootprintCategory         func(childComplexity int, id snowflake.ID) int
		Footprints                func(childComplexity int) int
		Part                      func(childComplexity int, id snowflake.ID) int
		PartAttachment            func(childComplexity int, id snowflake.ID) int
		PartAttachments           func(childComplexity int) int
		PartCategories            func(childComplexity int, category *model.PartCategoryInput) int
		PartCategory              func(childComplexity int, id snowflake.ID) int
		PartMeasurementUnit       func(childComplexity int, id snowflake.ID) int
		PartMeasurementUnits      func(childComplexity int) int
		PartParameter             func(childComplexity int, id snowflake.ID) int
		PartParameters            func(childComplexity int) int
		Parts                     func(childComplexity int, category *model.PartCategoryInput) int
		SiPrefix                  func(childComplexity int, id snowflake.ID) int
		SiPrefixes                func(childComplexity int, params *model.QuerySiPrefixInput) int
		StorageLocation           func(childComplexity int, id snowflake.ID) int
		StorageLocationCategories func(childComplexity int, category *model.StorageLocationCategoryInput) int
		StorageLocationCategory   func(childComplexity int, id snowflake.ID) int
		StorageLocationImage      func(childComplexity int, id snowflake.ID) int
		StorageLocationImages     func(childComplexity int) int
		StorageLocations          func(childComplexity int, category *model.StorageLocationCategoryInput) int
		Unit                      func(childComplexity int, id snowflake.ID) int
		Units                     func(childComplexity int, params *model.QueryUnitInput) int
	}

	SiPrefix struct {
		Base     func(childComplexity int) int
		Exponent func(childComplexity int) int
		ID       func(childComplexity int) int
		Prefix   func(childComplexity int) int
		Symbol   func(childComplexity int) int
	}

	StorageLocation struct {
		Category func(childComplexity int) int
		ID       func(childComplexity int) int
		Image    func(childComplexity int) int
		Name     func(childComplexity int) int
		Parts    func(childComplexity int) int
	}

	StorageLocationCategory struct {
		Children         func(childComplexity int) int
		Description      func(childComplexity int) int
		ID               func(childComplexity int) int
		Name             func(childComplexity int) int
		Parent           func(childComplexity int) int
		Root             func(childComplexity int) int
		StorageLocations func(childComplexity int) int
	}

	StorageLocationImage struct {
		File func(childComplexity int) int
		ID   func(childComplexity int) int
	}

	Unit struct {
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Prefixes func(childComplexity int) int
		Symbol   func(childComplexity int) int
	}
}

type FootprintResolver interface {
	Category(ctx context.Context, obj *model.Footprint) (*model.FootprintCategory, error)

	Attachments(ctx context.Context, obj *model.Footprint) ([]*model.FootprintAttachment, error)
	Image(ctx context.Context, obj *model.Footprint) (*model.FootprintAttachment, error)
}
type FootprintCategoryResolver interface {
	Parent(ctx context.Context, obj *model.FootprintCategory) (*model.FootprintCategory, error)
	Children(ctx context.Context, obj *model.FootprintCategory) ([]*model.FootprintCategory, error)
	Footprints(ctx context.Context, obj *model.FootprintCategory) ([]*model.Footprint, error)
}
type MutationResolver interface {
	CreateFootprint(ctx context.Context, input model.FootprintInput) (*model.Footprint, error)
	UpdateFootprint(ctx context.Context, id snowflake.ID, input model.FootprintInput) (*model.Footprint, error)
	DeleteFootprint(ctx context.Context, id snowflake.ID) (*model.Footprint, error)
	CreateFootprintCategory(ctx context.Context, input model.FootprintCategoryInput) (*model.FootprintCategory, error)
	UpdateFootprintCategory(ctx context.Context, id snowflake.ID, input model.FootprintCategoryInput) (*model.FootprintCategory, error)
	DeleteFootprintCategory(ctx context.Context, id snowflake.ID) (*model.FootprintCategory, error)
	CreateFootprintAttachment(ctx context.Context, input model.FootprintAttachmentInput) (*model.FootprintAttachment, error)
	UpdateFootprintAttachment(ctx context.Context, id snowflake.ID, input model.FootprintAttachmentInput) (*model.FootprintAttachment, error)
	DeleteFootprintAttachment(ctx context.Context, id snowflake.ID) (*model.FootprintAttachment, error)
	CreatePartMeasurementUnit(ctx context.Context, input model.PartMeasurementUnitInput) (*model.PartMeasurementUnit, error)
	UpdatePartMeasurementUnit(ctx context.Context, id snowflake.ID, input model.PartMeasurementUnitInput) (*model.PartMeasurementUnit, error)
	DeletePartMeasurementUnit(ctx context.Context, id snowflake.ID) (*model.PartMeasurementUnit, error)
	CreatePartCategory(ctx context.Context, input model.PartCategoryInput) (*model.PartCategory, error)
	UpdatePartCategory(ctx context.Context, id snowflake.ID, input model.PartCategoryInput) (*model.PartCategory, error)
	DeletePartCategory(ctx context.Context, id snowflake.ID) (*model.PartCategory, error)
	CreatePart(ctx context.Context, input model.PartInput) (*model.Part, error)
	UpdatePart(ctx context.Context, id snowflake.ID, input model.PartInput) (*model.Part, error)
	DeletePart(ctx context.Context, id snowflake.ID) (*model.Part, error)
	CreatePartAttachment(ctx context.Context, input model.PartAttachmentInput) (*model.PartAttachment, error)
	UpdatePartAttachment(ctx context.Context, id snowflake.ID, input model.PartAttachmentInput) (*model.PartAttachment, error)
	DeletePartAttachment(ctx context.Context, id snowflake.ID) (*model.PartAttachment, error)
	CreatePartParameter(ctx context.Context, input model.PartParameterInput) (*model.PartParameter, error)
	UpdatePartParameter(ctx context.Context, id snowflake.ID, input model.PartParameterInput) (*model.PartParameter, error)
	DeletePartParameter(ctx context.Context, id snowflake.ID) (*model.PartParameter, error)
	CreateStorageLocationCategory(ctx context.Context, input model.StorageLocationCategoryInput) (*model.StorageLocationCategory, error)
	UpdateStorageLocationCategory(ctx context.Context, id snowflake.ID, input model.StorageLocationCategoryInput) (*model.StorageLocationCategory, error)
	DeleteStorageLocationCategory(ctx context.Context, id snowflake.ID) (*model.StorageLocationCategory, error)
	CreateStorageLocation(ctx context.Context, input model.StorageLocationInput) (*model.StorageLocation, error)
	UpdateStorageLocation(ctx context.Context, id snowflake.ID, input model.StorageLocationInput) (*model.StorageLocation, error)
	DeleteStorageLocation(ctx context.Context, id snowflake.ID) (*model.StorageLocation, error)
	CreateStorageLocationImage(ctx context.Context, input model.StorageLocationImageInput) (*model.StorageLocationImage, error)
	UpdateStorageLocationImage(ctx context.Context, id snowflake.ID, input model.StorageLocationImageInput) (*model.StorageLocationImage, error)
	DeleteStorageLocationImage(ctx context.Context, id snowflake.ID) (*model.StorageLocationImage, error)
	CreateSiPrefix(ctx context.Context, input model.SiPrefixInput) (*model.SiPrefix, error)
	UpdateSiPrefix(ctx context.Context, id snowflake.ID, input model.SiPrefixInput) (*model.SiPrefix, error)
	DeleteSiPrefix(ctx context.Context, id snowflake.ID) (*model.SiPrefix, error)
	CreateUnit(ctx context.Context, input model.UnitInput) (*model.Unit, error)
	UpdateUnit(ctx context.Context, id snowflake.ID, input model.UnitInput) (*model.Unit, error)
	DeleteUnit(ctx context.Context, id snowflake.ID) (*model.Unit, error)
}
type PartResolver interface {
	Category(ctx context.Context, obj *model.Part) (*model.PartCategory, error)

	Footprint(ctx context.Context, obj *model.Part) (*model.Footprint, error)
	Unit(ctx context.Context, obj *model.Part) (*model.PartMeasurementUnit, error)
	StorageLocation(ctx context.Context, obj *model.Part) (*model.StorageLocation, error)
	Attachments(ctx context.Context, obj *model.Part) ([]*model.PartAttachment, error)

	Parameters(ctx context.Context, obj *model.Part) ([]*model.PartParameter, error)
}
type PartCategoryResolver interface {
	Parts(ctx context.Context, obj *model.PartCategory) ([]*model.PartCategory, error)
	Children(ctx context.Context, obj *model.PartCategory) ([]*model.PartCategory, error)
	Parent(ctx context.Context, obj *model.PartCategory) (*model.PartCategory, error)
}
type PartParameterResolver interface {
	Part(ctx context.Context, obj *model.PartParameter) (*model.Part, error)

	Unit(ctx context.Context, obj *model.PartParameter) (*model.Unit, error)

	ValueType(ctx context.Context, obj *model.PartParameter) (model.ValueType, error)
	SiPrefix(ctx context.Context, obj *model.PartParameter) (*model.SiPrefix, error)
	MinSiPrefix(ctx context.Context, obj *model.PartParameter) (*model.SiPrefix, error)
	MaxSiPrefix(ctx context.Context, obj *model.PartParameter) (*model.SiPrefix, error)
}
type QueryResolver interface {
	Footprints(ctx context.Context) ([]*model.Footprint, error)
	Footprint(ctx context.Context, id snowflake.ID) (*model.Footprint, error)
	FootprintCategories(ctx context.Context) ([]*model.FootprintCategory, error)
	FootprintCategory(ctx context.Context, id snowflake.ID) (*model.FootprintCategory, error)
	FootprintAttachments(ctx context.Context) ([]*model.FootprintAttachment, error)
	FootprintAttachment(ctx context.Context, id snowflake.ID) (*model.FootprintAttachment, error)
	Parts(ctx context.Context, category *model.PartCategoryInput) ([]*model.Part, error)
	Part(ctx context.Context, id snowflake.ID) (*model.Part, error)
	PartCategories(ctx context.Context, category *model.PartCategoryInput) ([]*model.PartCategory, error)
	PartCategory(ctx context.Context, id snowflake.ID) (*model.PartCategory, error)
	PartMeasurementUnits(ctx context.Context) ([]*model.PartMeasurementUnit, error)
	PartMeasurementUnit(ctx context.Context, id snowflake.ID) (*model.PartMeasurementUnit, error)
	PartAttachments(ctx context.Context) ([]*model.PartAttachment, error)
	PartAttachment(ctx context.Context, id snowflake.ID) (*model.PartAttachment, error)
	PartParameters(ctx context.Context) ([]*model.PartParameter, error)
	PartParameter(ctx context.Context, id snowflake.ID) (*model.PartParameter, error)
	StorageLocations(ctx context.Context, category *model.StorageLocationCategoryInput) ([]*model.StorageLocation, error)
	StorageLocation(ctx context.Context, id snowflake.ID) (*model.StorageLocation, error)
	StorageLocationCategories(ctx context.Context, category *model.StorageLocationCategoryInput) ([]*model.StorageLocationCategory, error)
	StorageLocationCategory(ctx context.Context, id snowflake.ID) (*model.StorageLocationCategory, error)
	StorageLocationImages(ctx context.Context) ([]*model.StorageLocationImage, error)
	StorageLocationImage(ctx context.Context, id snowflake.ID) (*model.StorageLocationImage, error)
	SiPrefixes(ctx context.Context, params *model.QuerySiPrefixInput) ([]*model.SiPrefix, error)
	SiPrefix(ctx context.Context, id snowflake.ID) (*model.SiPrefix, error)
	Units(ctx context.Context, params *model.QueryUnitInput) ([]*model.Unit, error)
	Unit(ctx context.Context, id snowflake.ID) (*model.Unit, error)
}
type StorageLocationResolver interface {
	Image(ctx context.Context, obj *model.StorageLocation) (*model.StorageLocationImage, error)
	Category(ctx context.Context, obj *model.StorageLocation) (*model.StorageLocationCategory, error)
	Parts(ctx context.Context, obj *model.StorageLocation) ([]*model.Part, error)
}
type StorageLocationCategoryResolver interface {
	StorageLocations(ctx context.Context, obj *model.StorageLocationCategory) ([]*model.StorageLocation, error)

	Parent(ctx context.Context, obj *model.StorageLocationCategory) (*model.StorageLocationCategory, error)
	Children(ctx context.Context, obj *model.StorageLocationCategory) ([]*model.StorageLocationCategory, error)
}
type UnitResolver interface {
	Prefixes(ctx context.Context, obj *model.Unit) ([]*model.SiPrefix, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Footprint.attachments":
		if e.complexity.Footprint.Attachments == nil {
			break
		}

		return e.complexity.Footprint.Attachments(childComplexity), true

	case "Footprint.category":
		if e.complexity.Footprint.Category == nil {
			break
		}

		return e.complexity.Footprint.Category(childComplexity), true

	case "Footprint.description":
		if e.complexity.Footprint.Description == nil {
			break
		}

		return e.complexity.Footprint.Description(childComplexity), true

	case "Footprint.id":
		if e.complexity.Footprint.ID == nil {
			break
		}

		return e.complexity.Footprint.ID(childComplexity), true

	case "Footprint.image":
		if e.complexity.Footprint.Image == nil {
			break
		}

		return e.complexity.Footprint.Image(childComplexity), true

	case "Footprint.name":
		if e.complexity.Footprint.Name == nil {
			break
		}

		return e.complexity.Footprint.Name(childComplexity), true

	case "FootprintAttachment.file":
		if e.complexity.FootprintAttachment.File == nil {
			break
		}

		return e.complexity.FootprintAttachment.File(childComplexity), true

	case "FootprintAttachment.id":
		if e.complexity.FootprintAttachment.ID == nil {
			break
		}

		return e.complexity.FootprintAttachment.ID(childComplexity), true

	case "FootprintCategory.children":
		if e.complexity.FootprintCategory.Children == nil {
			break
		}

		return e.complexity.FootprintCategory.Children(childComplexity), true

	case "FootprintCategory.description":
		if e.complexity.FootprintCategory.Description == nil {
			break
		}

		return e.complexity.FootprintCategory.Description(childComplexity), true

	case "FootprintCategory.footprints":
		if e.complexity.FootprintCategory.Footprints == nil {
			break
		}

		return e.complexity.FootprintCategory.Footprints(childComplexity), true

	case "FootprintCategory.id":
		if e.complexity.FootprintCategory.ID == nil {
			break
		}

		return e.complexity.FootprintCategory.ID(childComplexity), true

	case "FootprintCategory.name":
		if e.complexity.FootprintCategory.Name == nil {
			break
		}

		return e.complexity.FootprintCategory.Name(childComplexity), true

	case "FootprintCategory.parent":
		if e.complexity.FootprintCategory.Parent == nil {
			break
		}

		return e.complexity.FootprintCategory.Parent(childComplexity), true

	case "Mutation.createFootprint":
		if e.complexity.Mutation.CreateFootprint == nil {
			break
		}

		args, err := ec.field_Mutation_createFootprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFootprint(childComplexity, args["input"].(model.FootprintInput)), true

	case "Mutation.createFootprintAttachment":
		if e.complexity.Mutation.CreateFootprintAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_createFootprintAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFootprintAttachment(childComplexity, args["input"].(model.FootprintAttachmentInput)), true

	case "Mutation.createFootprintCategory":
		if e.complexity.Mutation.CreateFootprintCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createFootprintCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFootprintCategory(childComplexity, args["input"].(model.FootprintCategoryInput)), true

	case "Mutation.createPart":
		if e.complexity.Mutation.CreatePart == nil {
			break
		}

		args, err := ec.field_Mutation_createPart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePart(childComplexity, args["input"].(model.PartInput)), true

	case "Mutation.createPartAttachment":
		if e.complexity.Mutation.CreatePartAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_createPartAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePartAttachment(childComplexity, args["input"].(model.PartAttachmentInput)), true

	case "Mutation.createPartCategory":
		if e.complexity.Mutation.CreatePartCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createPartCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePartCategory(childComplexity, args["input"].(model.PartCategoryInput)), true

	case "Mutation.createPartMeasurementUnit":
		if e.complexity.Mutation.CreatePartMeasurementUnit == nil {
			break
		}

		args, err := ec.field_Mutation_createPartMeasurementUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePartMeasurementUnit(childComplexity, args["input"].(model.PartMeasurementUnitInput)), true

	case "Mutation.createPartParameter":
		if e.complexity.Mutation.CreatePartParameter == nil {
			break
		}

		args, err := ec.field_Mutation_createPartParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePartParameter(childComplexity, args["input"].(model.PartParameterInput)), true

	case "Mutation.createSiPrefix":
		if e.complexity.Mutation.CreateSiPrefix == nil {
			break
		}

		args, err := ec.field_Mutation_createSiPrefix_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSiPrefix(childComplexity, args["input"].(model.SiPrefixInput)), true

	case "Mutation.createStorageLocation":
		if e.complexity.Mutation.CreateStorageLocation == nil {
			break
		}

		args, err := ec.field_Mutation_createStorageLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateStorageLocation(childComplexity, args["input"].(model.StorageLocationInput)), true

	case "Mutation.createStorageLocationCategory":
		if e.complexity.Mutation.CreateStorageLocationCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createStorageLocationCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateStorageLocationCategory(childComplexity, args["input"].(model.StorageLocationCategoryInput)), true

	case "Mutation.createStorageLocationImage":
		if e.complexity.Mutation.CreateStorageLocationImage == nil {
			break
		}

		args, err := ec.field_Mutation_createStorageLocationImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateStorageLocationImage(childComplexity, args["input"].(model.StorageLocationImageInput)), true

	case "Mutation.createUnit":
		if e.complexity.Mutation.CreateUnit == nil {
			break
		}

		args, err := ec.field_Mutation_createUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUnit(childComplexity, args["input"].(model.UnitInput)), true

	case "Mutation.deleteFootprint":
		if e.complexity.Mutation.DeleteFootprint == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFootprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFootprint(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deleteFootprintAttachment":
		if e.complexity.Mutation.DeleteFootprintAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFootprintAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFootprintAttachment(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deleteFootprintCategory":
		if e.complexity.Mutation.DeleteFootprintCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFootprintCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFootprintCategory(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deletePart":
		if e.complexity.Mutation.DeletePart == nil {
			break
		}

		args, err := ec.field_Mutation_deletePart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePart(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deletePartAttachment":
		if e.complexity.Mutation.DeletePartAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_deletePartAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePartAttachment(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deletePartCategory":
		if e.complexity.Mutation.DeletePartCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deletePartCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePartCategory(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deletePartMeasurementUnit":
		if e.complexity.Mutation.DeletePartMeasurementUnit == nil {
			break
		}

		args, err := ec.field_Mutation_deletePartMeasurementUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePartMeasurementUnit(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deletePartParameter":
		if e.complexity.Mutation.DeletePartParameter == nil {
			break
		}

		args, err := ec.field_Mutation_deletePartParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePartParameter(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deleteSiPrefix":
		if e.complexity.Mutation.DeleteSiPrefix == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSiPrefix_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSiPrefix(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deleteStorageLocation":
		if e.complexity.Mutation.DeleteStorageLocation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStorageLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStorageLocation(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deleteStorageLocationCategory":
		if e.complexity.Mutation.DeleteStorageLocationCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStorageLocationCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStorageLocationCategory(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deleteStorageLocationImage":
		if e.complexity.Mutation.DeleteStorageLocationImage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteStorageLocationImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteStorageLocationImage(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.deleteUnit":
		if e.complexity.Mutation.DeleteUnit == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUnit(childComplexity, args["id"].(snowflake.ID)), true

	case "Mutation.updateFootprint":
		if e.complexity.Mutation.UpdateFootprint == nil {
			break
		}

		args, err := ec.field_Mutation_updateFootprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFootprint(childComplexity, args["id"].(snowflake.ID), args["input"].(model.FootprintInput)), true

	case "Mutation.updateFootprintAttachment":
		if e.complexity.Mutation.UpdateFootprintAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_updateFootprintAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFootprintAttachment(childComplexity, args["id"].(snowflake.ID), args["input"].(model.FootprintAttachmentInput)), true

	case "Mutation.updateFootprintCategory":
		if e.complexity.Mutation.UpdateFootprintCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateFootprintCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFootprintCategory(childComplexity, args["id"].(snowflake.ID), args["input"].(model.FootprintCategoryInput)), true

	case "Mutation.updatePart":
		if e.complexity.Mutation.UpdatePart == nil {
			break
		}

		args, err := ec.field_Mutation_updatePart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePart(childComplexity, args["id"].(snowflake.ID), args["input"].(model.PartInput)), true

	case "Mutation.updatePartAttachment":
		if e.complexity.Mutation.UpdatePartAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_updatePartAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePartAttachment(childComplexity, args["id"].(snowflake.ID), args["input"].(model.PartAttachmentInput)), true

	case "Mutation.updatePartCategory":
		if e.complexity.Mutation.UpdatePartCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updatePartCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePartCategory(childComplexity, args["id"].(snowflake.ID), args["input"].(model.PartCategoryInput)), true

	case "Mutation.updatePartMeasurementUnit":
		if e.complexity.Mutation.UpdatePartMeasurementUnit == nil {
			break
		}

		args, err := ec.field_Mutation_updatePartMeasurementUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePartMeasurementUnit(childComplexity, args["id"].(snowflake.ID), args["input"].(model.PartMeasurementUnitInput)), true

	case "Mutation.updatePartParameter":
		if e.complexity.Mutation.UpdatePartParameter == nil {
			break
		}

		args, err := ec.field_Mutation_updatePartParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePartParameter(childComplexity, args["id"].(snowflake.ID), args["input"].(model.PartParameterInput)), true

	case "Mutation.updateSiPrefix":
		if e.complexity.Mutation.UpdateSiPrefix == nil {
			break
		}

		args, err := ec.field_Mutation_updateSiPrefix_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSiPrefix(childComplexity, args["id"].(snowflake.ID), args["input"].(model.SiPrefixInput)), true

	case "Mutation.updateStorageLocation":
		if e.complexity.Mutation.UpdateStorageLocation == nil {
			break
		}

		args, err := ec.field_Mutation_updateStorageLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateStorageLocation(childComplexity, args["id"].(snowflake.ID), args["input"].(model.StorageLocationInput)), true

	case "Mutation.updateStorageLocationCategory":
		if e.complexity.Mutation.UpdateStorageLocationCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updateStorageLocationCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateStorageLocationCategory(childComplexity, args["id"].(snowflake.ID), args["input"].(model.StorageLocationCategoryInput)), true

	case "Mutation.updateStorageLocationImage":
		if e.complexity.Mutation.UpdateStorageLocationImage == nil {
			break
		}

		args, err := ec.field_Mutation_updateStorageLocationImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateStorageLocationImage(childComplexity, args["id"].(snowflake.ID), args["input"].(model.StorageLocationImageInput)), true

	case "Mutation.updateUnit":
		if e.complexity.Mutation.UpdateUnit == nil {
			break
		}

		args, err := ec.field_Mutation_updateUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUnit(childComplexity, args["id"].(snowflake.ID), args["input"].(model.UnitInput)), true

	case "Part.attachments":
		if e.complexity.Part.Attachments == nil {
			break
		}

		return e.complexity.Part.Attachments(childComplexity), true

	case "Part.category":
		if e.complexity.Part.Category == nil {
			break
		}

		return e.complexity.Part.Category(childComplexity), true

	case "Part.comment":
		if e.complexity.Part.Comment == nil {
			break
		}

		return e.complexity.Part.Comment(childComplexity), true

	case "Part.description":
		if e.complexity.Part.Description == nil {
			break
		}

		return e.complexity.Part.Description(childComplexity), true

	case "Part.footprint":
		if e.complexity.Part.Footprint == nil {
			break
		}

		return e.complexity.Part.Footprint(childComplexity), true

	case "Part.id":
		if e.complexity.Part.ID == nil {
			break
		}

		return e.complexity.Part.ID(childComplexity), true

	case "Part.internalPartNumber":
		if e.complexity.Part.InternalPartNumber == nil {
			break
		}

		return e.complexity.Part.InternalPartNumber(childComplexity), true

	case "Part.minStockLevel":
		if e.complexity.Part.MinStockLevel == nil {
			break
		}

		return e.complexity.Part.MinStockLevel(childComplexity), true

	case "Part.name":
		if e.complexity.Part.Name == nil {
			break
		}

		return e.complexity.Part.Name(childComplexity), true

	case "Part.parameters":
		if e.complexity.Part.Parameters == nil {
			break
		}

		return e.complexity.Part.Parameters(childComplexity), true

	case "Part.stockLevel":
		if e.complexity.Part.StockLevel == nil {
			break
		}

		return e.complexity.Part.StockLevel(childComplexity), true

	case "Part.storageLocation":
		if e.complexity.Part.StorageLocation == nil {
			break
		}

		return e.complexity.Part.StorageLocation(childComplexity), true

	case "Part.unit":
		if e.complexity.Part.Unit == nil {
			break
		}

		return e.complexity.Part.Unit(childComplexity), true

	case "PartAttachment.file":
		if e.complexity.PartAttachment.File == nil {
			break
		}

		return e.complexity.PartAttachment.File(childComplexity), true

	case "PartAttachment.id":
		if e.complexity.PartAttachment.ID == nil {
			break
		}

		return e.complexity.PartAttachment.ID(childComplexity), true

	case "PartAttachment.isImage":
		if e.complexity.PartAttachment.IsImage == nil {
			break
		}

		return e.complexity.PartAttachment.IsImage(childComplexity), true

	case "PartCategory.children":
		if e.complexity.PartCategory.Children == nil {
			break
		}

		return e.complexity.PartCategory.Children(childComplexity), true

	case "PartCategory.description":
		if e.complexity.PartCategory.Description == nil {
			break
		}

		return e.complexity.PartCategory.Description(childComplexity), true

	case "PartCategory.id":
		if e.complexity.PartCategory.ID == nil {
			break
		}

		return e.complexity.PartCategory.ID(childComplexity), true

	case "PartCategory.name":
		if e.complexity.PartCategory.Name == nil {
			break
		}

		return e.complexity.PartCategory.Name(childComplexity), true

	case "PartCategory.parent":
		if e.complexity.PartCategory.Parent == nil {
			break
		}

		return e.complexity.PartCategory.Parent(childComplexity), true

	case "PartCategory.parts":
		if e.complexity.PartCategory.Parts == nil {
			break
		}

		return e.complexity.PartCategory.Parts(childComplexity), true

	case "PartCategory.root":
		if e.complexity.PartCategory.Root == nil {
			break
		}

		return e.complexity.PartCategory.Root(childComplexity), true

	case "PartMeasurementUnit.default":
		if e.complexity.PartMeasurementUnit.Default == nil {
			break
		}

		return e.complexity.PartMeasurementUnit.Default(childComplexity), true

	case "PartMeasurementUnit.id":
		if e.complexity.PartMeasurementUnit.ID == nil {
			break
		}

		return e.complexity.PartMeasurementUnit.ID(childComplexity), true

	case "PartMeasurementUnit.name":
		if e.complexity.PartMeasurementUnit.Name == nil {
			break
		}

		return e.complexity.PartMeasurementUnit.Name(childComplexity), true

	case "PartMeasurementUnit.shortName":
		if e.complexity.PartMeasurementUnit.ShortName == nil {
			break
		}

		return e.complexity.PartMeasurementUnit.ShortName(childComplexity), true

	case "PartParameter.description":
		if e.complexity.PartParameter.Description == nil {
			break
		}

		return e.complexity.PartParameter.Description(childComplexity), true

	case "PartParameter.id":
		if e.complexity.PartParameter.ID == nil {
			break
		}

		return e.complexity.PartParameter.ID(childComplexity), true

	case "PartParameter.maxSiPrefix":
		if e.complexity.PartParameter.MaxSiPrefix == nil {
			break
		}

		return e.complexity.PartParameter.MaxSiPrefix(childComplexity), true

	case "PartParameter.maxValue":
		if e.complexity.PartParameter.MaxValue == nil {
			break
		}

		return e.complexity.PartParameter.MaxValue(childComplexity), true

	case "PartParameter.minSiPrefix":
		if e.complexity.PartParameter.MinSiPrefix == nil {
			break
		}

		return e.complexity.PartParameter.MinSiPrefix(childComplexity), true

	case "PartParameter.minValue":
		if e.complexity.PartParameter.MinValue == nil {
			break
		}

		return e.complexity.PartParameter.MinValue(childComplexity), true

	case "PartParameter.name":
		if e.complexity.PartParameter.Name == nil {
			break
		}

		return e.complexity.PartParameter.Name(childComplexity), true

	case "PartParameter.normalizedMaxValue":
		if e.complexity.PartParameter.NormalizedMaxValue == nil {
			break
		}

		return e.complexity.PartParameter.NormalizedMaxValue(childComplexity), true

	case "PartParameter.normalizedMinValue":
		if e.complexity.PartParameter.NormalizedMinValue == nil {
			break
		}

		return e.complexity.PartParameter.NormalizedMinValue(childComplexity), true

	case "PartParameter.normalizedValue":
		if e.complexity.PartParameter.NormalizedValue == nil {
			break
		}

		return e.complexity.PartParameter.NormalizedValue(childComplexity), true

	case "PartParameter.part":
		if e.complexity.PartParameter.Part == nil {
			break
		}

		return e.complexity.PartParameter.Part(childComplexity), true

	case "PartParameter.siPrefix":
		if e.complexity.PartParameter.SiPrefix == nil {
			break
		}

		return e.complexity.PartParameter.SiPrefix(childComplexity), true

	case "PartParameter.stringValue":
		if e.complexity.PartParameter.StringValue == nil {
			break
		}

		return e.complexity.PartParameter.StringValue(childComplexity), true

	case "PartParameter.unit":
		if e.complexity.PartParameter.Unit == nil {
			break
		}

		return e.complexity.PartParameter.Unit(childComplexity), true

	case "PartParameter.value":
		if e.complexity.PartParameter.Value == nil {
			break
		}

		return e.complexity.PartParameter.Value(childComplexity), true

	case "PartParameter.valueType":
		if e.complexity.PartParameter.ValueType == nil {
			break
		}

		return e.complexity.PartParameter.ValueType(childComplexity), true

	case "Query.footprint":
		if e.complexity.Query.Footprint == nil {
			break
		}

		args, err := ec.field_Query_footprint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Footprint(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.footprintAttachment":
		if e.complexity.Query.FootprintAttachment == nil {
			break
		}

		args, err := ec.field_Query_footprintAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FootprintAttachment(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.footprintAttachments":
		if e.complexity.Query.FootprintAttachments == nil {
			break
		}

		return e.complexity.Query.FootprintAttachments(childComplexity), true

	case "Query.footprintCategories":
		if e.complexity.Query.FootprintCategories == nil {
			break
		}

		return e.complexity.Query.FootprintCategories(childComplexity), true

	case "Query.footprintCategory":
		if e.complexity.Query.FootprintCategory == nil {
			break
		}

		args, err := ec.field_Query_footprintCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FootprintCategory(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.footprints":
		if e.complexity.Query.Footprints == nil {
			break
		}

		return e.complexity.Query.Footprints(childComplexity), true

	case "Query.part":
		if e.complexity.Query.Part == nil {
			break
		}

		args, err := ec.field_Query_part_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Part(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.partAttachment":
		if e.complexity.Query.PartAttachment == nil {
			break
		}

		args, err := ec.field_Query_partAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartAttachment(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.partAttachments":
		if e.complexity.Query.PartAttachments == nil {
			break
		}

		return e.complexity.Query.PartAttachments(childComplexity), true

	case "Query.partCategories":
		if e.complexity.Query.PartCategories == nil {
			break
		}

		args, err := ec.field_Query_partCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartCategories(childComplexity, args["category"].(*model.PartCategoryInput)), true

	case "Query.partCategory":
		if e.complexity.Query.PartCategory == nil {
			break
		}

		args, err := ec.field_Query_partCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartCategory(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.partMeasurementUnit":
		if e.complexity.Query.PartMeasurementUnit == nil {
			break
		}

		args, err := ec.field_Query_partMeasurementUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartMeasurementUnit(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.partMeasurementUnits":
		if e.complexity.Query.PartMeasurementUnits == nil {
			break
		}

		return e.complexity.Query.PartMeasurementUnits(childComplexity), true

	case "Query.partParameter":
		if e.complexity.Query.PartParameter == nil {
			break
		}

		args, err := ec.field_Query_partParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PartParameter(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.partParameters":
		if e.complexity.Query.PartParameters == nil {
			break
		}

		return e.complexity.Query.PartParameters(childComplexity), true

	case "Query.parts":
		if e.complexity.Query.Parts == nil {
			break
		}

		args, err := ec.field_Query_parts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Parts(childComplexity, args["category"].(*model.PartCategoryInput)), true

	case "Query.siPrefix":
		if e.complexity.Query.SiPrefix == nil {
			break
		}

		args, err := ec.field_Query_siPrefix_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SiPrefix(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.siPrefixes":
		if e.complexity.Query.SiPrefixes == nil {
			break
		}

		args, err := ec.field_Query_siPrefixes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SiPrefixes(childComplexity, args["params"].(*model.QuerySiPrefixInput)), true

	case "Query.storageLocation":
		if e.complexity.Query.StorageLocation == nil {
			break
		}

		args, err := ec.field_Query_storageLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StorageLocation(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.storageLocationCategories":
		if e.complexity.Query.StorageLocationCategories == nil {
			break
		}

		args, err := ec.field_Query_storageLocationCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StorageLocationCategories(childComplexity, args["category"].(*model.StorageLocationCategoryInput)), true

	case "Query.storageLocationCategory":
		if e.complexity.Query.StorageLocationCategory == nil {
			break
		}

		args, err := ec.field_Query_storageLocationCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StorageLocationCategory(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.storageLocationImage":
		if e.complexity.Query.StorageLocationImage == nil {
			break
		}

		args, err := ec.field_Query_storageLocationImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StorageLocationImage(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.storageLocationImages":
		if e.complexity.Query.StorageLocationImages == nil {
			break
		}

		return e.complexity.Query.StorageLocationImages(childComplexity), true

	case "Query.storageLocations":
		if e.complexity.Query.StorageLocations == nil {
			break
		}

		args, err := ec.field_Query_storageLocations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.StorageLocations(childComplexity, args["category"].(*model.StorageLocationCategoryInput)), true

	case "Query.unit":
		if e.complexity.Query.Unit == nil {
			break
		}

		args, err := ec.field_Query_unit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Unit(childComplexity, args["id"].(snowflake.ID)), true

	case "Query.units":
		if e.complexity.Query.Units == nil {
			break
		}

		args, err := ec.field_Query_units_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Units(childComplexity, args["params"].(*model.QueryUnitInput)), true

	case "SiPrefix.base":
		if e.complexity.SiPrefix.Base == nil {
			break
		}

		return e.complexity.SiPrefix.Base(childComplexity), true

	case "SiPrefix.exponent":
		if e.complexity.SiPrefix.Exponent == nil {
			break
		}

		return e.complexity.SiPrefix.Exponent(childComplexity), true

	case "SiPrefix.id":
		if e.complexity.SiPrefix.ID == nil {
			break
		}

		return e.complexity.SiPrefix.ID(childComplexity), true

	case "SiPrefix.prefix":
		if e.complexity.SiPrefix.Prefix == nil {
			break
		}

		return e.complexity.SiPrefix.Prefix(childComplexity), true

	case "SiPrefix.symbol":
		if e.complexity.SiPrefix.Symbol == nil {
			break
		}

		return e.complexity.SiPrefix.Symbol(childComplexity), true

	case "StorageLocation.category":
		if e.complexity.StorageLocation.Category == nil {
			break
		}

		return e.complexity.StorageLocation.Category(childComplexity), true

	case "StorageLocation.id":
		if e.complexity.StorageLocation.ID == nil {
			break
		}

		return e.complexity.StorageLocation.ID(childComplexity), true

	case "StorageLocation.Image":
		if e.complexity.StorageLocation.Image == nil {
			break
		}

		return e.complexity.StorageLocation.Image(childComplexity), true

	case "StorageLocation.name":
		if e.complexity.StorageLocation.Name == nil {
			break
		}

		return e.complexity.StorageLocation.Name(childComplexity), true

	case "StorageLocation.parts":
		if e.complexity.StorageLocation.Parts == nil {
			break
		}

		return e.complexity.StorageLocation.Parts(childComplexity), true

	case "StorageLocationCategory.children":
		if e.complexity.StorageLocationCategory.Children == nil {
			break
		}

		return e.complexity.StorageLocationCategory.Children(childComplexity), true

	case "StorageLocationCategory.description":
		if e.complexity.StorageLocationCategory.Description == nil {
			break
		}

		return e.complexity.StorageLocationCategory.Description(childComplexity), true

	case "StorageLocationCategory.id":
		if e.complexity.StorageLocationCategory.ID == nil {
			break
		}

		return e.complexity.StorageLocationCategory.ID(childComplexity), true

	case "StorageLocationCategory.name":
		if e.complexity.StorageLocationCategory.Name == nil {
			break
		}

		return e.complexity.StorageLocationCategory.Name(childComplexity), true

	case "StorageLocationCategory.parent":
		if e.complexity.StorageLocationCategory.Parent == nil {
			break
		}

		return e.complexity.StorageLocationCategory.Parent(childComplexity), true

	case "StorageLocationCategory.root":
		if e.complexity.StorageLocationCategory.Root == nil {
			break
		}

		return e.complexity.StorageLocationCategory.Root(childComplexity), true

	case "StorageLocationCategory.storageLocations":
		if e.complexity.StorageLocationCategory.StorageLocations == nil {
			break
		}

		return e.complexity.StorageLocationCategory.StorageLocations(childComplexity), true

	case "StorageLocationImage.file":
		if e.complexity.StorageLocationImage.File == nil {
			break
		}

		return e.complexity.StorageLocationImage.File(childComplexity), true

	case "StorageLocationImage.id":
		if e.complexity.StorageLocationImage.ID == nil {
			break
		}

		return e.complexity.StorageLocationImage.ID(childComplexity), true

	case "Unit.id":
		if e.complexity.Unit.ID == nil {
			break
		}

		return e.complexity.Unit.ID(childComplexity), true

	case "Unit.name":
		if e.complexity.Unit.Name == nil {
			break
		}

		return e.complexity.Unit.Name(childComplexity), true

	case "Unit.prefixes":
		if e.complexity.Unit.Prefixes == nil {
			break
		}

		return e.complexity.Unit.Prefixes(childComplexity), true

	case "Unit.symbol":
		if e.complexity.Unit.Symbol == nil {
			break
		}

		return e.complexity.Unit.Symbol(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "api/footprint.graphqls", Input: `type Footprint implements Node {
	id:          ID!
	name:        String!
	category:    FootprintCategory!
	description: String
	attachments: [FootprintAttachment]
	image:       FootprintAttachment
}

input FootprintInput {
	name:        String!
	description: String
	image:       ID
	category:    ID
}


type FootprintCategory implements Node {
	id:          ID!
	name:        String!
	description: String
	parent:      FootprintCategory
	children:    [FootprintCategory]
	footprints:  [Footprint]
}

input FootprintCategoryInput {
	name:        String!
	description: String
	parent:      ID
}


type FootprintAttachment implements Node {
	id:   ID!
	file: Upload!
}

input FootprintAttachmentInput {
	isImage: Boolean!
	file:    Upload!
}`, BuiltIn: false},
	{Name: "api/part.graphqls", Input: `type Part implements Node {
	id:                 ID!
	name:               String!
	category:           PartCategory!
	description:        String
	footprint:          Footprint!
	unit:               PartMeasurementUnit !
	storageLocation:    StorageLocation!
	#Manufacturers:     [PartManufacturer!]!
	#Distributors:      [PartDistributor!]!
	attachments:        [PartAttachment]
	comment:            String
	stockLevel:         Float!
	minStockLevel:      Float!
	#ProjectParts:      [ProjectPart!]!
	parameters:         [PartParameter]
	internalPartNumber: String!
}

input PartInput {
	name:               String!
	category:           ID!
	description:        String
	footprint:          ID!
	unit:               ID!
	storageLocation:    ID!
	#Manufacturers:     [PartManufacturer!]!
	#Distributors:      [PartDistributor!]!
	attachments:        [ID]
	comment:            String
	stockLevel:         Float!
	minStockLevel:      Float!
	#ProjectParts:      [ProjectPart!]!
	parameters:         [ID]
	internalPartNumber: String!
}

type PartAttachment implements Node {
	id:                 ID!
	isImage:            Boolean!
	file:                Upload!
}

input PartAttachmentInput {
	isImage:            Boolean!
	file:                Upload!
}

type PartCategory implements Node {
	id:          ID!
	name:        String!
	description: String
	parts:       [PartCategory]
	children: [PartCategory]
	parent: PartCategory
	root: Boolean
}

input PartCategoryInput {
	name:        String!
	description: String
	parent:      ID
}

type PartMeasurementUnit implements Node {
	id:        ID!
	name:      String!
	shortName: String!
	default:   Boolean!
}

input PartMeasurementUnitInput {
	name:      String!
	shortName: String!
}

type PartParameter implements Node{
	id:   ID!
	part: Part!
	name: String!
	description: String
	unit: Unit!
	value: Float
	normalizedValue: Float
	maxValue: Float
	normalizedMaxValue: Float
	minValue: Float
	normalizedMinValue: Float
	stringValue: String
	valueType: ValueType!
	siPrefix: SiPrefix!
	minSiPrefix: SiPrefix!
	maxSiPrefix: SiPrefix!

}

input PartParameterInput {
	part: ID!
	name: String!
	description: String
	unit: ID!
	value: Float
	maxValue: Float
	minValue: Float
	stringValue: String
	valueType: ValueType!
	siPrefix: ID!
	minSiPrefix: ID!
	maxSiPrefix: ID!
}`, BuiltIn: false},
	{Name: "api/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goModel(model: String, models: [String!]) on OBJECT
	| INPUT_OBJECT
	| SCALAR
	| ENUM
	| INTERFACE
	| UNION

directive @goField(
	forceResolver: Boolean
	name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Upload

interface Node {
	id:   ID!
}


enum ValueType {
	STRING
	NUMBER
}

type Query {
	footprints: [Footprint!]
	footprint(id: ID!): Footprint!

	footprintCategories: [FootprintCategory!]
	footprintCategory(id: ID!): FootprintCategory!

	footprintAttachments: [FootprintAttachment!]
	footprintAttachment(id: ID!): FootprintAttachment!


	parts(category: PartCategoryInput): [Part!]
	part(id: ID!): Part!

	partCategories(category: PartCategoryInput): [PartCategory!]
	partCategory(id: ID!): PartCategory!

	partMeasurementUnits: [PartMeasurementUnit!]
	partMeasurementUnit(id: ID!): PartMeasurementUnit!

	partAttachments: [PartAttachment!]
	partAttachment(id: ID!): PartAttachment!

	partParameters: [PartParameter!]
	partParameter(id: ID!): PartParameter!



	storageLocations(category: StorageLocationCategoryInput): [StorageLocation!]
	storageLocation(id: ID!): StorageLocation!

	storageLocationCategories(category: StorageLocationCategoryInput): [StorageLocationCategory!]
	storageLocationCategory(id: ID!): StorageLocationCategory!

	storageLocationImages: [StorageLocationImage!]
	storageLocationImage(id: ID!): StorageLocationImage!



	siPrefixes(params: QuerySiPrefixInput): [SiPrefix!]
	siPrefix(id: ID!): SiPrefix!

	units(params: QueryUnitInput): [Unit!]
	unit(id: ID!): Unit!
}

type Mutation {
	createFootprint(input: FootprintInput!): Footprint!
	updateFootprint(id: ID!, input: FootprintInput!): Footprint!
	deleteFootprint(id: ID!): Footprint!

	createFootprintCategory(input: FootprintCategoryInput!): FootprintCategory!
	updateFootprintCategory(id: ID!, input: FootprintCategoryInput!): FootprintCategory!
	deleteFootprintCategory(id: ID!): FootprintCategory!

	createFootprintAttachment(input: FootprintAttachmentInput!): FootprintAttachment!
	updateFootprintAttachment(id: ID!, input: FootprintAttachmentInput!): FootprintAttachment!
	deleteFootprintAttachment(id: ID!): FootprintAttachment!


	createPartMeasurementUnit(input: PartMeasurementUnitInput!):          PartMeasurementUnit!
	updatePartMeasurementUnit(id: ID!, input: PartMeasurementUnitInput!): PartMeasurementUnit!
	deletePartMeasurementUnit(id: ID!):                                 PartMeasurementUnit!

	createPartCategory(input: PartCategoryInput!):          PartCategory!
	updatePartCategory(id: ID!, input: PartCategoryInput!): PartCategory!
	deletePartCategory(id: ID!):                          PartCategory!

	createPart(input: PartInput!):          Part!
	updatePart(id: ID!, input: PartInput!): Part!
	deletePart(id: ID!):                  Part!

	createPartAttachment(input: PartAttachmentInput!):          PartAttachment!
	updatePartAttachment(id: ID!, input: PartAttachmentInput!): PartAttachment!
	deletePartAttachment(id: ID!):                  PartAttachment!

	createPartParameter(input: PartParameterInput!):          PartParameter!
	updatePartParameter(id: ID!, input: PartParameterInput!): PartParameter!
	deletePartParameter(id: ID!):                  PartParameter!



	createStorageLocationCategory(input: StorageLocationCategoryInput!):          StorageLocationCategory!
	updateStorageLocationCategory(id: ID!, input: StorageLocationCategoryInput!): StorageLocationCategory!
	deleteStorageLocationCategory(id: ID!):                                     StorageLocationCategory!

	createStorageLocation(input: StorageLocationInput!):          StorageLocation!
	updateStorageLocation(id: ID!, input: StorageLocationInput!): StorageLocation!
	deleteStorageLocation(id: ID!):                             StorageLocation!

	createStorageLocationImage(input: StorageLocationImageInput!):          StorageLocationImage!
	updateStorageLocationImage(id: ID!, input: StorageLocationImageInput!): StorageLocationImage!
	deleteStorageLocationImage(id: ID!):                  StorageLocationImage!



	createSiPrefix(input: SiPrefixInput!):          SiPrefix!
	updateSiPrefix(id: ID!, input: SiPrefixInput!): SiPrefix!
	deleteSiPrefix(id: ID!):                  SiPrefix!

	createUnit(input: UnitInput!):          Unit!
	updateUnit(id: ID!, input: UnitInput!): Unit!
	deleteUnit(id: ID!):                  Unit!
}`, BuiltIn: false},
	{Name: "api/storageLocation.graphqls", Input: `type StorageLocation implements Node {
	id:       ID!
	name:     String!
	Image:  StorageLocationImage
	category: StorageLocationCategory!
	parts:    [Part!]
}

input StorageLocationInput  {
	name:     String!
	Image:  StorageLocationImageInput
	category: ID!
}


type StorageLocationImage implements Node {
	id:   ID!
	file: Upload!
}

input StorageLocationImageInput {
	file: Upload!
}

type StorageLocationCategory implements Node {
	id:               ID!
	name:             String!
	description:      String
	storageLocations: [StorageLocation]
	root: Boolean
	parent: StorageLocationCategory
	children: [StorageLocationCategory]
}

input StorageLocationCategoryInput {
	parent:      ID
	name:        String!
	description: String
}`, BuiltIn: false},
	{Name: "api/unit.graphqls", Input: `type Unit implements Node{
	id:   ID!
	name: String!
	symbol: String!
	prefixes: [SiPrefix!]!
}

input UnitInput {
	name: String!
	symbol: String!
	prefixes: [ID]
}
input QueryUnitInput {
	name: String
	symbol: String
	prefixes: [ID!]
}

type SiPrefix implements Node{
	id:   ID!
	symbol: String!
	prefix: String!
	exponent: Int!
	base: Int!
}

input SiPrefixInput {
	symbol: String!
	prefix: String!
	exponent: Int!
	base: Int!
}
input QuerySiPrefixInput {
	symbol: String
	prefix: String
	exponent: Int
	base: Int
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createFootprintAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FootprintAttachmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFootprintAttachmentInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFootprintCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FootprintCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFootprintCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFootprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.FootprintInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFootprintInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPartAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PartAttachmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPartAttachmentInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPartCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PartCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPartCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPartMeasurementUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PartMeasurementUnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPartMeasurementUnitInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPartParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PartParameterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPartParameterInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PartInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPartInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSiPrefix_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SiPrefixInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSiPrefixInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefixInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createStorageLocationCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.StorageLocationCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStorageLocationCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createStorageLocationImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.StorageLocationImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStorageLocationImageInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createStorageLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.StorageLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStorageLocationInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUnitInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFootprintAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFootprintCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFootprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePartAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePartCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePartMeasurementUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePartParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSiPrefix_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteStorageLocationCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteStorageLocationImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteStorageLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFootprintAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.FootprintAttachmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNFootprintAttachmentInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFootprintCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.FootprintCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNFootprintCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFootprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.FootprintInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNFootprintInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePartAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PartAttachmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPartAttachmentInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePartCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PartCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPartCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePartMeasurementUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PartMeasurementUnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPartMeasurementUnitInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePartParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PartParameterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPartParameterInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.PartInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPartInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSiPrefix_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.SiPrefixInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNSiPrefixInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefixInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateStorageLocationCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.StorageLocationCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNStorageLocationCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateStorageLocationImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.StorageLocationImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNStorageLocationImageInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateStorageLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.StorageLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNStorageLocationInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUnitInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_footprintAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_footprintCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_footprint_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_partAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_partCategories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PartCategoryInput
	if tmp, ok := rawArgs["category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
		arg0, err = ec.unmarshalOPartCategoryInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_partCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_partMeasurementUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_partParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_part_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_parts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.PartCategoryInput
	if tmp, ok := rawArgs["category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
		arg0, err = ec.unmarshalOPartCategoryInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_siPrefix_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_siPrefixes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.QuerySiPrefixInput
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalOQuerySiPrefixInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐQuerySiPrefixInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_storageLocationCategories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StorageLocationCategoryInput
	if tmp, ok := rawArgs["category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
		arg0, err = ec.unmarshalOStorageLocationCategoryInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_storageLocationCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_storageLocationImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_storageLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_storageLocations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StorageLocationCategoryInput
	if tmp, ok := rawArgs["category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
		arg0, err = ec.unmarshalOStorageLocationCategoryInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_unit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 snowflake.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_units_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.QueryUnitInput
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalOQueryUnitInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐQueryUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Footprint_id(ctx context.Context, field graphql.CollectedField, obj *model.Footprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Footprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Footprint_name(ctx context.Context, field graphql.CollectedField, obj *model.Footprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Footprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Footprint_category(ctx context.Context, field graphql.CollectedField, obj *model.Footprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Footprint",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Footprint().Category(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintCategory)
	fc.Result = res
	return ec.marshalNFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Footprint_description(ctx context.Context, field graphql.CollectedField, obj *model.Footprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Footprint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Footprint_attachments(ctx context.Context, field graphql.CollectedField, obj *model.Footprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Footprint",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Footprint().Attachments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FootprintAttachment)
	fc.Result = res
	return ec.marshalOFootprintAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Footprint_image(ctx context.Context, field graphql.CollectedField, obj *model.Footprint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Footprint",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Footprint().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FootprintAttachment)
	fc.Result = res
	return ec.marshalOFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintAttachment_id(ctx context.Context, field graphql.CollectedField, obj *model.FootprintAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintAttachment_file(ctx context.Context, field graphql.CollectedField, obj *model.FootprintAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql.Upload)
	fc.Result = res
	return ec.marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintCategory_id(ctx context.Context, field graphql.CollectedField, obj *model.FootprintCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintCategory_name(ctx context.Context, field graphql.CollectedField, obj *model.FootprintCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintCategory_description(ctx context.Context, field graphql.CollectedField, obj *model.FootprintCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintCategory_parent(ctx context.Context, field graphql.CollectedField, obj *model.FootprintCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FootprintCategory().Parent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FootprintCategory)
	fc.Result = res
	return ec.marshalOFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintCategory_children(ctx context.Context, field graphql.CollectedField, obj *model.FootprintCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FootprintCategory().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FootprintCategory)
	fc.Result = res
	return ec.marshalOFootprintCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _FootprintCategory_footprints(ctx context.Context, field graphql.CollectedField, obj *model.FootprintCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FootprintCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FootprintCategory().Footprints(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Footprint)
	fc.Result = res
	return ec.marshalOFootprint2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFootprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFootprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFootprint(rctx, args["input"].(model.FootprintInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Footprint)
	fc.Result = res
	return ec.marshalNFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFootprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFootprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFootprint(rctx, args["id"].(snowflake.ID), args["input"].(model.FootprintInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Footprint)
	fc.Result = res
	return ec.marshalNFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFootprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFootprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFootprint(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Footprint)
	fc.Result = res
	return ec.marshalNFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFootprintCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFootprintCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFootprintCategory(rctx, args["input"].(model.FootprintCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintCategory)
	fc.Result = res
	return ec.marshalNFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFootprintCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFootprintCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFootprintCategory(rctx, args["id"].(snowflake.ID), args["input"].(model.FootprintCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintCategory)
	fc.Result = res
	return ec.marshalNFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFootprintCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFootprintCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFootprintCategory(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintCategory)
	fc.Result = res
	return ec.marshalNFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFootprintAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFootprintAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFootprintAttachment(rctx, args["input"].(model.FootprintAttachmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintAttachment)
	fc.Result = res
	return ec.marshalNFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFootprintAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFootprintAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFootprintAttachment(rctx, args["id"].(snowflake.ID), args["input"].(model.FootprintAttachmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintAttachment)
	fc.Result = res
	return ec.marshalNFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFootprintAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFootprintAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFootprintAttachment(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintAttachment)
	fc.Result = res
	return ec.marshalNFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPartMeasurementUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPartMeasurementUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePartMeasurementUnit(rctx, args["input"].(model.PartMeasurementUnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartMeasurementUnit)
	fc.Result = res
	return ec.marshalNPartMeasurementUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePartMeasurementUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePartMeasurementUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePartMeasurementUnit(rctx, args["id"].(snowflake.ID), args["input"].(model.PartMeasurementUnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartMeasurementUnit)
	fc.Result = res
	return ec.marshalNPartMeasurementUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePartMeasurementUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePartMeasurementUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePartMeasurementUnit(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartMeasurementUnit)
	fc.Result = res
	return ec.marshalNPartMeasurementUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPartCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPartCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePartCategory(rctx, args["input"].(model.PartCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartCategory)
	fc.Result = res
	return ec.marshalNPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePartCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePartCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePartCategory(rctx, args["id"].(snowflake.ID), args["input"].(model.PartCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartCategory)
	fc.Result = res
	return ec.marshalNPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePartCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePartCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePartCategory(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartCategory)
	fc.Result = res
	return ec.marshalNPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPart_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePart(rctx, args["input"].(model.PartInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Part)
	fc.Result = res
	return ec.marshalNPart2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePart_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePart(rctx, args["id"].(snowflake.ID), args["input"].(model.PartInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Part)
	fc.Result = res
	return ec.marshalNPart2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePart_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePart(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Part)
	fc.Result = res
	return ec.marshalNPart2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPartAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPartAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePartAttachment(rctx, args["input"].(model.PartAttachmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartAttachment)
	fc.Result = res
	return ec.marshalNPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePartAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePartAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePartAttachment(rctx, args["id"].(snowflake.ID), args["input"].(model.PartAttachmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartAttachment)
	fc.Result = res
	return ec.marshalNPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePartAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePartAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePartAttachment(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartAttachment)
	fc.Result = res
	return ec.marshalNPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPartParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPartParameter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePartParameter(rctx, args["input"].(model.PartParameterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartParameter)
	fc.Result = res
	return ec.marshalNPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePartParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePartParameter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePartParameter(rctx, args["id"].(snowflake.ID), args["input"].(model.PartParameterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartParameter)
	fc.Result = res
	return ec.marshalNPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePartParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePartParameter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePartParameter(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartParameter)
	fc.Result = res
	return ec.marshalNPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createStorageLocationCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createStorageLocationCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateStorageLocationCategory(rctx, args["input"].(model.StorageLocationCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalNStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateStorageLocationCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateStorageLocationCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateStorageLocationCategory(rctx, args["id"].(snowflake.ID), args["input"].(model.StorageLocationCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalNStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteStorageLocationCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteStorageLocationCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteStorageLocationCategory(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalNStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createStorageLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createStorageLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateStorageLocation(rctx, args["input"].(model.StorageLocationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocation)
	fc.Result = res
	return ec.marshalNStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateStorageLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateStorageLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateStorageLocation(rctx, args["id"].(snowflake.ID), args["input"].(model.StorageLocationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocation)
	fc.Result = res
	return ec.marshalNStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteStorageLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteStorageLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteStorageLocation(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocation)
	fc.Result = res
	return ec.marshalNStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createStorageLocationImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createStorageLocationImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateStorageLocationImage(rctx, args["input"].(model.StorageLocationImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationImage)
	fc.Result = res
	return ec.marshalNStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateStorageLocationImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateStorageLocationImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateStorageLocationImage(rctx, args["id"].(snowflake.ID), args["input"].(model.StorageLocationImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationImage)
	fc.Result = res
	return ec.marshalNStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteStorageLocationImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteStorageLocationImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteStorageLocationImage(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationImage)
	fc.Result = res
	return ec.marshalNStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSiPrefix(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSiPrefix_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSiPrefix(rctx, args["input"].(model.SiPrefixInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSiPrefix(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSiPrefix_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSiPrefix(rctx, args["id"].(snowflake.ID), args["input"].(model.SiPrefixInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSiPrefix(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSiPrefix_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSiPrefix(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUnit(rctx, args["input"].(model.UnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Unit)
	fc.Result = res
	return ec.marshalNUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUnit(rctx, args["id"].(snowflake.ID), args["input"].(model.UnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Unit)
	fc.Result = res
	return ec.marshalNUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUnit(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Unit)
	fc.Result = res
	return ec.marshalNUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_id(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_name(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_category(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Part().Category(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartCategory)
	fc.Result = res
	return ec.marshalNPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_description(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_footprint(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Part().Footprint(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Footprint)
	fc.Result = res
	return ec.marshalNFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_unit(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Part().Unit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartMeasurementUnit)
	fc.Result = res
	return ec.marshalNPartMeasurementUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_storageLocation(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Part().StorageLocation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocation)
	fc.Result = res
	return ec.marshalNStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_attachments(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Part().Attachments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartAttachment)
	fc.Result = res
	return ec.marshalOPartAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_comment(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_stockLevel(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StockLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_minStockLevel(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinStockLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_parameters(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Part().Parameters(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartParameter)
	fc.Result = res
	return ec.marshalOPartParameter2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx, field.Selections, res)
}

func (ec *executionContext) _Part_internalPartNumber(ctx context.Context, field graphql.CollectedField, obj *model.Part) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Part",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPartNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PartAttachment_id(ctx context.Context, field graphql.CollectedField, obj *model.PartAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _PartAttachment_isImage(ctx context.Context, field graphql.CollectedField, obj *model.PartAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PartAttachment_file(ctx context.Context, field graphql.CollectedField, obj *model.PartAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql.Upload)
	fc.Result = res
	return ec.marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _PartCategory_id(ctx context.Context, field graphql.CollectedField, obj *model.PartCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _PartCategory_name(ctx context.Context, field graphql.CollectedField, obj *model.PartCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PartCategory_description(ctx context.Context, field graphql.CollectedField, obj *model.PartCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PartCategory_parts(ctx context.Context, field graphql.CollectedField, obj *model.PartCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartCategory().Parts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartCategory)
	fc.Result = res
	return ec.marshalOPartCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _PartCategory_children(ctx context.Context, field graphql.CollectedField, obj *model.PartCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartCategory().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartCategory)
	fc.Result = res
	return ec.marshalOPartCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _PartCategory_parent(ctx context.Context, field graphql.CollectedField, obj *model.PartCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartCategory().Parent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PartCategory)
	fc.Result = res
	return ec.marshalOPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _PartCategory_root(ctx context.Context, field graphql.CollectedField, obj *model.PartCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Root, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PartMeasurementUnit_id(ctx context.Context, field graphql.CollectedField, obj *model.PartMeasurementUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartMeasurementUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _PartMeasurementUnit_name(ctx context.Context, field graphql.CollectedField, obj *model.PartMeasurementUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartMeasurementUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PartMeasurementUnit_shortName(ctx context.Context, field graphql.CollectedField, obj *model.PartMeasurementUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartMeasurementUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PartMeasurementUnit_default(ctx context.Context, field graphql.CollectedField, obj *model.PartMeasurementUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartMeasurementUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_id(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_part(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartParameter().Part(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Part)
	fc.Result = res
	return ec.marshalNPart2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_name(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_description(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_unit(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartParameter().Unit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Unit)
	fc.Result = res
	return ec.marshalNUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_value(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_normalizedValue(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NormalizedValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_maxValue(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_normalizedMaxValue(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NormalizedMaxValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_minValue(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_normalizedMinValue(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NormalizedMinValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_stringValue(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_valueType(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartParameter().ValueType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ValueType)
	fc.Result = res
	return ec.marshalNValueType2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐValueType(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_siPrefix(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartParameter().SiPrefix(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_minSiPrefix(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartParameter().MinSiPrefix(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, field.Selections, res)
}

func (ec *executionContext) _PartParameter_maxSiPrefix(ctx context.Context, field graphql.CollectedField, obj *model.PartParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PartParameter",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PartParameter().MaxSiPrefix(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_footprints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Footprints(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Footprint)
	fc.Result = res
	return ec.marshalOFootprint2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_footprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_footprint_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Footprint(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Footprint)
	fc.Result = res
	return ec.marshalNFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_footprintCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FootprintCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FootprintCategory)
	fc.Result = res
	return ec.marshalOFootprintCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_footprintCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_footprintCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FootprintCategory(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintCategory)
	fc.Result = res
	return ec.marshalNFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_footprintAttachments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FootprintAttachments(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FootprintAttachment)
	fc.Result = res
	return ec.marshalOFootprintAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_footprintAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_footprintAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FootprintAttachment(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FootprintAttachment)
	fc.Result = res
	return ec.marshalNFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_parts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_parts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Parts(rctx, args["category"].(*model.PartCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Part)
	fc.Result = res
	return ec.marshalOPart2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_part(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_part_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Part(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Part)
	fc.Result = res
	return ec.marshalNPart2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_partCategories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartCategories(rctx, args["category"].(*model.PartCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartCategory)
	fc.Result = res
	return ec.marshalOPartCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_partCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartCategory(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartCategory)
	fc.Result = res
	return ec.marshalNPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partMeasurementUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartMeasurementUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartMeasurementUnit)
	fc.Result = res
	return ec.marshalOPartMeasurementUnit2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partMeasurementUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_partMeasurementUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartMeasurementUnit(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartMeasurementUnit)
	fc.Result = res
	return ec.marshalNPartMeasurementUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partAttachments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartAttachments(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartAttachment)
	fc.Result = res
	return ec.marshalOPartAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_partAttachment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartAttachment(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartAttachment)
	fc.Result = res
	return ec.marshalNPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partParameters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartParameters(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PartParameter)
	fc.Result = res
	return ec.marshalOPartParameter2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_partParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_partParameter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PartParameter(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PartParameter)
	fc.Result = res
	return ec.marshalNPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_storageLocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_storageLocations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorageLocations(rctx, args["category"].(*model.StorageLocationCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StorageLocation)
	fc.Result = res
	return ec.marshalOStorageLocation2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_storageLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_storageLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorageLocation(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocation)
	fc.Result = res
	return ec.marshalNStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_storageLocationCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_storageLocationCategories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorageLocationCategories(rctx, args["category"].(*model.StorageLocationCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalOStorageLocationCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_storageLocationCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_storageLocationCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorageLocationCategory(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalNStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_storageLocationImages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorageLocationImages(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StorageLocationImage)
	fc.Result = res
	return ec.marshalOStorageLocationImage2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_storageLocationImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_storageLocationImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().StorageLocationImage(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationImage)
	fc.Result = res
	return ec.marshalNStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_siPrefixes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_siPrefixes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SiPrefixes(rctx, args["params"].(*model.QuerySiPrefixInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SiPrefix)
	fc.Result = res
	return ec.marshalOSiPrefix2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefixᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_siPrefix(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_siPrefix_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SiPrefix(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_units(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_units_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Units(rctx, args["params"].(*model.QueryUnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Unit)
	fc.Result = res
	return ec.marshalOUnit2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_unit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_unit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Unit(rctx, args["id"].(snowflake.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Unit)
	fc.Result = res
	return ec.marshalNUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SiPrefix_id(ctx context.Context, field graphql.CollectedField, obj *model.SiPrefix) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SiPrefix",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _SiPrefix_symbol(ctx context.Context, field graphql.CollectedField, obj *model.SiPrefix) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SiPrefix",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Symbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SiPrefix_prefix(ctx context.Context, field graphql.CollectedField, obj *model.SiPrefix) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SiPrefix",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SiPrefix_exponent(ctx context.Context, field graphql.CollectedField, obj *model.SiPrefix) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SiPrefix",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exponent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SiPrefix_base(ctx context.Context, field graphql.CollectedField, obj *model.SiPrefix) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SiPrefix",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Base, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocation_id(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocation_name(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocation_Image(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StorageLocation().Image(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationImage)
	fc.Result = res
	return ec.marshalOStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocation_category(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StorageLocation().Category(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalNStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocation_parts(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StorageLocation().Parts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Part)
	fc.Result = res
	return ec.marshalOPart2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationCategory_id(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationCategory_name(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationCategory_description(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationCategory_storageLocations(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StorageLocationCategory().StorageLocations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StorageLocation)
	fc.Result = res
	return ec.marshalOStorageLocation2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationCategory_root(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Root, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationCategory_parent(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StorageLocationCategory().Parent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalOStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationCategory_children(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationCategory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationCategory",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.StorageLocationCategory().Children(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StorageLocationCategory)
	fc.Result = res
	return ec.marshalOStorageLocationCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationImage_id(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _StorageLocationImage_file(ctx context.Context, field graphql.CollectedField, obj *model.StorageLocationImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StorageLocationImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphql.Upload)
	fc.Result = res
	return ec.marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Unit_id(ctx context.Context, field graphql.CollectedField, obj *model.Unit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Unit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(snowflake.ID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) _Unit_name(ctx context.Context, field graphql.CollectedField, obj *model.Unit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Unit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Unit_symbol(ctx context.Context, field graphql.CollectedField, obj *model.Unit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Unit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Symbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Unit_prefixes(ctx context.Context, field graphql.CollectedField, obj *model.Unit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Unit",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Unit().Prefixes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SiPrefix)
	fc.Result = res
	return ec.marshalNSiPrefix2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefixᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputFootprintAttachmentInput(ctx context.Context, obj interface{}) (model.FootprintAttachmentInput, error) {
	var it model.FootprintAttachmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "isImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isImage"))
			it.IsImage, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFootprintCategoryInput(ctx context.Context, obj interface{}) (model.FootprintCategoryInput, error) {
	var it model.FootprintCategoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			it.Parent, err = ec.unmarshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFootprintInput(ctx context.Context, obj interface{}) (model.FootprintInput, error) {
	var it model.FootprintInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartAttachmentInput(ctx context.Context, obj interface{}) (model.PartAttachmentInput, error) {
	var it model.PartAttachmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "isImage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isImage"))
			it.IsImage, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartCategoryInput(ctx context.Context, obj interface{}) (model.PartCategoryInput, error) {
	var it model.PartCategoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			it.Parent, err = ec.unmarshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartInput(ctx context.Context, obj interface{}) (model.PartInput, error) {
	var it model.PartInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "footprint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("footprint"))
			it.Footprint, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "storageLocation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("storageLocation"))
			it.StorageLocation, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachments"))
			it.Attachments, err = ec.unmarshalOID2ᚕᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stockLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stockLevel"))
			it.StockLevel, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "minStockLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minStockLevel"))
			it.MinStockLevel, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "parameters":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parameters"))
			it.Parameters, err = ec.unmarshalOID2ᚕᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "internalPartNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalPartNumber"))
			it.InternalPartNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartMeasurementUnitInput(ctx context.Context, obj interface{}) (model.PartMeasurementUnitInput, error) {
	var it model.PartMeasurementUnitInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "shortName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortName"))
			it.ShortName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPartParameterInput(ctx context.Context, obj interface{}) (model.PartParameterInput, error) {
	var it model.PartParameterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "part":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("part"))
			it.Part, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			it.Unit, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxValue"))
			it.MaxValue, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "minValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minValue"))
			it.MinValue, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "stringValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stringValue"))
			it.StringValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "valueType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueType"))
			it.ValueType, err = ec.unmarshalNValueType2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐValueType(ctx, v)
			if err != nil {
				return it, err
			}
		case "siPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("siPrefix"))
			it.SiPrefix, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "minSiPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minSiPrefix"))
			it.MinSiPrefix, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "maxSiPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxSiPrefix"))
			it.MaxSiPrefix, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuerySiPrefixInput(ctx context.Context, obj interface{}) (model.QuerySiPrefixInput, error) {
	var it model.QuerySiPrefixInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "symbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("symbol"))
			it.Symbol, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
			it.Prefix, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exponent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exponent"))
			it.Exponent, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "base":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base"))
			it.Base, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQueryUnitInput(ctx context.Context, obj interface{}) (model.QueryUnitInput, error) {
	var it model.QueryUnitInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "symbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("symbol"))
			it.Symbol, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "prefixes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefixes"))
			it.Prefixes, err = ec.unmarshalOID2ᚕgithubᚗcomᚋbwmarrinᚋsnowflakeᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSiPrefixInput(ctx context.Context, obj interface{}) (model.SiPrefixInput, error) {
	var it model.SiPrefixInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "symbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("symbol"))
			it.Symbol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
			it.Prefix, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "exponent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("exponent"))
			it.Exponent, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "base":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base"))
			it.Base, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStorageLocationCategoryInput(ctx context.Context, obj interface{}) (model.StorageLocationCategoryInput, error) {
	var it model.StorageLocationCategoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "parent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parent"))
			it.Parent, err = ec.unmarshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStorageLocationImageInput(ctx context.Context, obj interface{}) (model.StorageLocationImageInput, error) {
	var it model.StorageLocationImageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStorageLocationInput(ctx context.Context, obj interface{}) (model.StorageLocationInput, error) {
	var it model.StorageLocationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Image"))
			it.Image, err = ec.unmarshalOStorageLocationImageInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImageInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUnitInput(ctx context.Context, obj interface{}) (model.UnitInput, error) {
	var it model.UnitInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "symbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("symbol"))
			it.Symbol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "prefixes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefixes"))
			it.Prefixes, err = ec.unmarshalOID2ᚕᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Footprint:
		return ec._Footprint(ctx, sel, &obj)
	case *model.Footprint:
		if obj == nil {
			return graphql.Null
		}
		return ec._Footprint(ctx, sel, obj)
	case model.FootprintCategory:
		return ec._FootprintCategory(ctx, sel, &obj)
	case *model.FootprintCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._FootprintCategory(ctx, sel, obj)
	case model.FootprintAttachment:
		return ec._FootprintAttachment(ctx, sel, &obj)
	case *model.FootprintAttachment:
		if obj == nil {
			return graphql.Null
		}
		return ec._FootprintAttachment(ctx, sel, obj)
	case model.Part:
		return ec._Part(ctx, sel, &obj)
	case *model.Part:
		if obj == nil {
			return graphql.Null
		}
		return ec._Part(ctx, sel, obj)
	case model.PartAttachment:
		return ec._PartAttachment(ctx, sel, &obj)
	case *model.PartAttachment:
		if obj == nil {
			return graphql.Null
		}
		return ec._PartAttachment(ctx, sel, obj)
	case model.PartCategory:
		return ec._PartCategory(ctx, sel, &obj)
	case *model.PartCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._PartCategory(ctx, sel, obj)
	case model.PartMeasurementUnit:
		return ec._PartMeasurementUnit(ctx, sel, &obj)
	case *model.PartMeasurementUnit:
		if obj == nil {
			return graphql.Null
		}
		return ec._PartMeasurementUnit(ctx, sel, obj)
	case model.PartParameter:
		return ec._PartParameter(ctx, sel, &obj)
	case *model.PartParameter:
		if obj == nil {
			return graphql.Null
		}
		return ec._PartParameter(ctx, sel, obj)
	case model.StorageLocation:
		return ec._StorageLocation(ctx, sel, &obj)
	case *model.StorageLocation:
		if obj == nil {
			return graphql.Null
		}
		return ec._StorageLocation(ctx, sel, obj)
	case model.StorageLocationImage:
		return ec._StorageLocationImage(ctx, sel, &obj)
	case *model.StorageLocationImage:
		if obj == nil {
			return graphql.Null
		}
		return ec._StorageLocationImage(ctx, sel, obj)
	case model.StorageLocationCategory:
		return ec._StorageLocationCategory(ctx, sel, &obj)
	case *model.StorageLocationCategory:
		if obj == nil {
			return graphql.Null
		}
		return ec._StorageLocationCategory(ctx, sel, obj)
	case model.Unit:
		return ec._Unit(ctx, sel, &obj)
	case *model.Unit:
		if obj == nil {
			return graphql.Null
		}
		return ec._Unit(ctx, sel, obj)
	case model.SiPrefix:
		return ec._SiPrefix(ctx, sel, &obj)
	case *model.SiPrefix:
		if obj == nil {
			return graphql.Null
		}
		return ec._SiPrefix(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var footprintImplementors = []string{"Footprint", "Node"}

func (ec *executionContext) _Footprint(ctx context.Context, sel ast.SelectionSet, obj *model.Footprint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, footprintImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Footprint")
		case "id":
			out.Values[i] = ec._Footprint_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Footprint_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Footprint_category(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "description":
			out.Values[i] = ec._Footprint_description(ctx, field, obj)
		case "attachments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Footprint_attachments(ctx, field, obj)
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Footprint_image(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var footprintAttachmentImplementors = []string{"FootprintAttachment", "Node"}

func (ec *executionContext) _FootprintAttachment(ctx context.Context, sel ast.SelectionSet, obj *model.FootprintAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, footprintAttachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FootprintAttachment")
		case "id":
			out.Values[i] = ec._FootprintAttachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file":
			out.Values[i] = ec._FootprintAttachment_file(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var footprintCategoryImplementors = []string{"FootprintCategory", "Node"}

func (ec *executionContext) _FootprintCategory(ctx context.Context, sel ast.SelectionSet, obj *model.FootprintCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, footprintCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FootprintCategory")
		case "id":
			out.Values[i] = ec._FootprintCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._FootprintCategory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._FootprintCategory_description(ctx, field, obj)
		case "parent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FootprintCategory_parent(ctx, field, obj)
				return res
			})
		case "children":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FootprintCategory_children(ctx, field, obj)
				return res
			})
		case "footprints":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FootprintCategory_footprints(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createFootprint":
			out.Values[i] = ec._Mutation_createFootprint(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFootprint":
			out.Values[i] = ec._Mutation_updateFootprint(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFootprint":
			out.Values[i] = ec._Mutation_deleteFootprint(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFootprintCategory":
			out.Values[i] = ec._Mutation_createFootprintCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFootprintCategory":
			out.Values[i] = ec._Mutation_updateFootprintCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFootprintCategory":
			out.Values[i] = ec._Mutation_deleteFootprintCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFootprintAttachment":
			out.Values[i] = ec._Mutation_createFootprintAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFootprintAttachment":
			out.Values[i] = ec._Mutation_updateFootprintAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFootprintAttachment":
			out.Values[i] = ec._Mutation_deleteFootprintAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPartMeasurementUnit":
			out.Values[i] = ec._Mutation_createPartMeasurementUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePartMeasurementUnit":
			out.Values[i] = ec._Mutation_updatePartMeasurementUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePartMeasurementUnit":
			out.Values[i] = ec._Mutation_deletePartMeasurementUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPartCategory":
			out.Values[i] = ec._Mutation_createPartCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePartCategory":
			out.Values[i] = ec._Mutation_updatePartCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePartCategory":
			out.Values[i] = ec._Mutation_deletePartCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPart":
			out.Values[i] = ec._Mutation_createPart(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePart":
			out.Values[i] = ec._Mutation_updatePart(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePart":
			out.Values[i] = ec._Mutation_deletePart(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPartAttachment":
			out.Values[i] = ec._Mutation_createPartAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePartAttachment":
			out.Values[i] = ec._Mutation_updatePartAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePartAttachment":
			out.Values[i] = ec._Mutation_deletePartAttachment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPartParameter":
			out.Values[i] = ec._Mutation_createPartParameter(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePartParameter":
			out.Values[i] = ec._Mutation_updatePartParameter(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePartParameter":
			out.Values[i] = ec._Mutation_deletePartParameter(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createStorageLocationCategory":
			out.Values[i] = ec._Mutation_createStorageLocationCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateStorageLocationCategory":
			out.Values[i] = ec._Mutation_updateStorageLocationCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteStorageLocationCategory":
			out.Values[i] = ec._Mutation_deleteStorageLocationCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createStorageLocation":
			out.Values[i] = ec._Mutation_createStorageLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateStorageLocation":
			out.Values[i] = ec._Mutation_updateStorageLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteStorageLocation":
			out.Values[i] = ec._Mutation_deleteStorageLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createStorageLocationImage":
			out.Values[i] = ec._Mutation_createStorageLocationImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateStorageLocationImage":
			out.Values[i] = ec._Mutation_updateStorageLocationImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteStorageLocationImage":
			out.Values[i] = ec._Mutation_deleteStorageLocationImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSiPrefix":
			out.Values[i] = ec._Mutation_createSiPrefix(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSiPrefix":
			out.Values[i] = ec._Mutation_updateSiPrefix(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSiPrefix":
			out.Values[i] = ec._Mutation_deleteSiPrefix(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUnit":
			out.Values[i] = ec._Mutation_createUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUnit":
			out.Values[i] = ec._Mutation_updateUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUnit":
			out.Values[i] = ec._Mutation_deleteUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var partImplementors = []string{"Part", "Node"}

func (ec *executionContext) _Part(ctx context.Context, sel ast.SelectionSet, obj *model.Part) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, partImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Part")
		case "id":
			out.Values[i] = ec._Part_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Part_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Part_category(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "description":
			out.Values[i] = ec._Part_description(ctx, field, obj)
		case "footprint":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Part_footprint(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "unit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Part_unit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "storageLocation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Part_storageLocation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "attachments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Part_attachments(ctx, field, obj)
				return res
			})
		case "comment":
			out.Values[i] = ec._Part_comment(ctx, field, obj)
		case "stockLevel":
			out.Values[i] = ec._Part_stockLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "minStockLevel":
			out.Values[i] = ec._Part_minStockLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "parameters":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Part_parameters(ctx, field, obj)
				return res
			})
		case "internalPartNumber":
			out.Values[i] = ec._Part_internalPartNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var partAttachmentImplementors = []string{"PartAttachment", "Node"}

func (ec *executionContext) _PartAttachment(ctx context.Context, sel ast.SelectionSet, obj *model.PartAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, partAttachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PartAttachment")
		case "id":
			out.Values[i] = ec._PartAttachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isImage":
			out.Values[i] = ec._PartAttachment_isImage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file":
			out.Values[i] = ec._PartAttachment_file(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var partCategoryImplementors = []string{"PartCategory", "Node"}

func (ec *executionContext) _PartCategory(ctx context.Context, sel ast.SelectionSet, obj *model.PartCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, partCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PartCategory")
		case "id":
			out.Values[i] = ec._PartCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._PartCategory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._PartCategory_description(ctx, field, obj)
		case "parts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartCategory_parts(ctx, field, obj)
				return res
			})
		case "children":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartCategory_children(ctx, field, obj)
				return res
			})
		case "parent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartCategory_parent(ctx, field, obj)
				return res
			})
		case "root":
			out.Values[i] = ec._PartCategory_root(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var partMeasurementUnitImplementors = []string{"PartMeasurementUnit", "Node"}

func (ec *executionContext) _PartMeasurementUnit(ctx context.Context, sel ast.SelectionSet, obj *model.PartMeasurementUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, partMeasurementUnitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PartMeasurementUnit")
		case "id":
			out.Values[i] = ec._PartMeasurementUnit_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PartMeasurementUnit_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortName":
			out.Values[i] = ec._PartMeasurementUnit_shortName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "default":
			out.Values[i] = ec._PartMeasurementUnit_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var partParameterImplementors = []string{"PartParameter", "Node"}

func (ec *executionContext) _PartParameter(ctx context.Context, sel ast.SelectionSet, obj *model.PartParameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, partParameterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PartParameter")
		case "id":
			out.Values[i] = ec._PartParameter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "part":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartParameter_part(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "name":
			out.Values[i] = ec._PartParameter_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._PartParameter_description(ctx, field, obj)
		case "unit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartParameter_unit(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "value":
			out.Values[i] = ec._PartParameter_value(ctx, field, obj)
		case "normalizedValue":
			out.Values[i] = ec._PartParameter_normalizedValue(ctx, field, obj)
		case "maxValue":
			out.Values[i] = ec._PartParameter_maxValue(ctx, field, obj)
		case "normalizedMaxValue":
			out.Values[i] = ec._PartParameter_normalizedMaxValue(ctx, field, obj)
		case "minValue":
			out.Values[i] = ec._PartParameter_minValue(ctx, field, obj)
		case "normalizedMinValue":
			out.Values[i] = ec._PartParameter_normalizedMinValue(ctx, field, obj)
		case "stringValue":
			out.Values[i] = ec._PartParameter_stringValue(ctx, field, obj)
		case "valueType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartParameter_valueType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "siPrefix":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartParameter_siPrefix(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "minSiPrefix":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartParameter_minSiPrefix(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "maxSiPrefix":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PartParameter_maxSiPrefix(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "footprints":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_footprints(ctx, field)
				return res
			})
		case "footprint":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_footprint(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "footprintCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_footprintCategories(ctx, field)
				return res
			})
		case "footprintCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_footprintCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "footprintAttachments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_footprintAttachments(ctx, field)
				return res
			})
		case "footprintAttachment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_footprintAttachment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "parts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_parts(ctx, field)
				return res
			})
		case "part":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_part(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "partCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partCategories(ctx, field)
				return res
			})
		case "partCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "partMeasurementUnits":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partMeasurementUnits(ctx, field)
				return res
			})
		case "partMeasurementUnit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partMeasurementUnit(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "partAttachments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partAttachments(ctx, field)
				return res
			})
		case "partAttachment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partAttachment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "partParameters":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partParameters(ctx, field)
				return res
			})
		case "partParameter":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_partParameter(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "storageLocations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_storageLocations(ctx, field)
				return res
			})
		case "storageLocation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_storageLocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "storageLocationCategories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_storageLocationCategories(ctx, field)
				return res
			})
		case "storageLocationCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_storageLocationCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "storageLocationImages":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_storageLocationImages(ctx, field)
				return res
			})
		case "storageLocationImage":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_storageLocationImage(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "siPrefixes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_siPrefixes(ctx, field)
				return res
			})
		case "siPrefix":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_siPrefix(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "units":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_units(ctx, field)
				return res
			})
		case "unit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_unit(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var siPrefixImplementors = []string{"SiPrefix", "Node"}

func (ec *executionContext) _SiPrefix(ctx context.Context, sel ast.SelectionSet, obj *model.SiPrefix) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, siPrefixImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SiPrefix")
		case "id":
			out.Values[i] = ec._SiPrefix_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "symbol":
			out.Values[i] = ec._SiPrefix_symbol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "prefix":
			out.Values[i] = ec._SiPrefix_prefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exponent":
			out.Values[i] = ec._SiPrefix_exponent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base":
			out.Values[i] = ec._SiPrefix_base(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var storageLocationImplementors = []string{"StorageLocation", "Node"}

func (ec *executionContext) _StorageLocation(ctx context.Context, sel ast.SelectionSet, obj *model.StorageLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storageLocationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StorageLocation")
		case "id":
			out.Values[i] = ec._StorageLocation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._StorageLocation_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "Image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StorageLocation_Image(ctx, field, obj)
				return res
			})
		case "category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StorageLocation_category(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "parts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StorageLocation_parts(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var storageLocationCategoryImplementors = []string{"StorageLocationCategory", "Node"}

func (ec *executionContext) _StorageLocationCategory(ctx context.Context, sel ast.SelectionSet, obj *model.StorageLocationCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storageLocationCategoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StorageLocationCategory")
		case "id":
			out.Values[i] = ec._StorageLocationCategory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._StorageLocationCategory_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._StorageLocationCategory_description(ctx, field, obj)
		case "storageLocations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StorageLocationCategory_storageLocations(ctx, field, obj)
				return res
			})
		case "root":
			out.Values[i] = ec._StorageLocationCategory_root(ctx, field, obj)
		case "parent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StorageLocationCategory_parent(ctx, field, obj)
				return res
			})
		case "children":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StorageLocationCategory_children(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var storageLocationImageImplementors = []string{"StorageLocationImage", "Node"}

func (ec *executionContext) _StorageLocationImage(ctx context.Context, sel ast.SelectionSet, obj *model.StorageLocationImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, storageLocationImageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StorageLocationImage")
		case "id":
			out.Values[i] = ec._StorageLocationImage_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "file":
			out.Values[i] = ec._StorageLocationImage_file(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unitImplementors = []string{"Unit", "Node"}

func (ec *executionContext) _Unit(ctx context.Context, sel ast.SelectionSet, obj *model.Unit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Unit")
		case "id":
			out.Values[i] = ec._Unit_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Unit_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "symbol":
			out.Values[i] = ec._Unit_symbol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "prefixes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Unit_prefixes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNFootprint2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx context.Context, sel ast.SelectionSet, v model.Footprint) graphql.Marshaler {
	return ec._Footprint(ctx, sel, &v)
}

func (ec *executionContext) marshalNFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx context.Context, sel ast.SelectionSet, v *model.Footprint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Footprint(ctx, sel, v)
}

func (ec *executionContext) marshalNFootprintAttachment2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx context.Context, sel ast.SelectionSet, v model.FootprintAttachment) graphql.Marshaler {
	return ec._FootprintAttachment(ctx, sel, &v)
}

func (ec *executionContext) marshalNFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx context.Context, sel ast.SelectionSet, v *model.FootprintAttachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FootprintAttachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFootprintAttachmentInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachmentInput(ctx context.Context, v interface{}) (model.FootprintAttachmentInput, error) {
	res, err := ec.unmarshalInputFootprintAttachmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFootprintCategory2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx context.Context, sel ast.SelectionSet, v model.FootprintCategory) graphql.Marshaler {
	return ec._FootprintCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx context.Context, sel ast.SelectionSet, v *model.FootprintCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FootprintCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFootprintCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategoryInput(ctx context.Context, v interface{}) (model.FootprintCategoryInput, error) {
	res, err := ec.unmarshalInputFootprintCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFootprintInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintInput(ctx context.Context, v interface{}) (model.FootprintInput, error) {
	res, err := ec.unmarshalInputFootprintInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx context.Context, v interface{}) (snowflake.ID, error) {
	res, err := graphql1.UnmarshalSnowflake(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx context.Context, sel ast.SelectionSet, v snowflake.ID) graphql.Marshaler {
	res := graphql1.MarshalSnowflake(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNPart2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx context.Context, sel ast.SelectionSet, v model.Part) graphql.Marshaler {
	return ec._Part(ctx, sel, &v)
}

func (ec *executionContext) marshalNPart2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx context.Context, sel ast.SelectionSet, v *model.Part) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Part(ctx, sel, v)
}

func (ec *executionContext) marshalNPartAttachment2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx context.Context, sel ast.SelectionSet, v model.PartAttachment) graphql.Marshaler {
	return ec._PartAttachment(ctx, sel, &v)
}

func (ec *executionContext) marshalNPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx context.Context, sel ast.SelectionSet, v *model.PartAttachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PartAttachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPartAttachmentInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachmentInput(ctx context.Context, v interface{}) (model.PartAttachmentInput, error) {
	res, err := ec.unmarshalInputPartAttachmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPartCategory2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx context.Context, sel ast.SelectionSet, v model.PartCategory) graphql.Marshaler {
	return ec._PartCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx context.Context, sel ast.SelectionSet, v *model.PartCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PartCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPartCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryInput(ctx context.Context, v interface{}) (model.PartCategoryInput, error) {
	res, err := ec.unmarshalInputPartCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPartInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartInput(ctx context.Context, v interface{}) (model.PartInput, error) {
	res, err := ec.unmarshalInputPartInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPartMeasurementUnit2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx context.Context, sel ast.SelectionSet, v model.PartMeasurementUnit) graphql.Marshaler {
	return ec._PartMeasurementUnit(ctx, sel, &v)
}

func (ec *executionContext) marshalNPartMeasurementUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx context.Context, sel ast.SelectionSet, v *model.PartMeasurementUnit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PartMeasurementUnit(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPartMeasurementUnitInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnitInput(ctx context.Context, v interface{}) (model.PartMeasurementUnitInput, error) {
	res, err := ec.unmarshalInputPartMeasurementUnitInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPartParameter2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx context.Context, sel ast.SelectionSet, v model.PartParameter) graphql.Marshaler {
	return ec._PartParameter(ctx, sel, &v)
}

func (ec *executionContext) marshalNPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx context.Context, sel ast.SelectionSet, v *model.PartParameter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PartParameter(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPartParameterInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameterInput(ctx context.Context, v interface{}) (model.PartParameterInput, error) {
	res, err := ec.unmarshalInputPartParameterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSiPrefix2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx context.Context, sel ast.SelectionSet, v model.SiPrefix) graphql.Marshaler {
	return ec._SiPrefix(ctx, sel, &v)
}

func (ec *executionContext) marshalNSiPrefix2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefixᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SiPrefix) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx context.Context, sel ast.SelectionSet, v *model.SiPrefix) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SiPrefix(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSiPrefixInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefixInput(ctx context.Context, v interface{}) (model.SiPrefixInput, error) {
	res, err := ec.unmarshalInputSiPrefixInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStorageLocation2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx context.Context, sel ast.SelectionSet, v model.StorageLocation) graphql.Marshaler {
	return ec._StorageLocation(ctx, sel, &v)
}

func (ec *executionContext) marshalNStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx context.Context, sel ast.SelectionSet, v *model.StorageLocation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StorageLocation(ctx, sel, v)
}

func (ec *executionContext) marshalNStorageLocationCategory2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx context.Context, sel ast.SelectionSet, v model.StorageLocationCategory) graphql.Marshaler {
	return ec._StorageLocationCategory(ctx, sel, &v)
}

func (ec *executionContext) marshalNStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx context.Context, sel ast.SelectionSet, v *model.StorageLocationCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StorageLocationCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStorageLocationCategoryInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryInput(ctx context.Context, v interface{}) (model.StorageLocationCategoryInput, error) {
	res, err := ec.unmarshalInputStorageLocationCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStorageLocationImage2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx context.Context, sel ast.SelectionSet, v model.StorageLocationImage) graphql.Marshaler {
	return ec._StorageLocationImage(ctx, sel, &v)
}

func (ec *executionContext) marshalNStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx context.Context, sel ast.SelectionSet, v *model.StorageLocationImage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StorageLocationImage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStorageLocationImageInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImageInput(ctx context.Context, v interface{}) (model.StorageLocationImageInput, error) {
	res, err := ec.unmarshalInputStorageLocationImageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStorageLocationInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationInput(ctx context.Context, v interface{}) (model.StorageLocationInput, error) {
	res, err := ec.unmarshalInputStorageLocationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUnit2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx context.Context, sel ast.SelectionSet, v model.Unit) graphql.Marshaler {
	return ec._Unit(ctx, sel, &v)
}

func (ec *executionContext) marshalNUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx context.Context, sel ast.SelectionSet, v *model.Unit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Unit(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUnitInput2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnitInput(ctx context.Context, v interface{}) (model.UnitInput, error) {
	res, err := ec.unmarshalInputUnitInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNValueType2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐValueType(ctx context.Context, v interface{}) (model.ValueType, error) {
	var res model.ValueType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNValueType2githubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐValueType(ctx context.Context, sel ast.SelectionSet, v model.ValueType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOFootprint2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx context.Context, sel ast.SelectionSet, v []*model.Footprint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFootprint2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Footprint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOFootprint2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprint(ctx context.Context, sel ast.SelectionSet, v *model.Footprint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Footprint(ctx, sel, v)
}

func (ec *executionContext) marshalOFootprintAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx context.Context, sel ast.SelectionSet, v []*model.FootprintAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFootprintAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FootprintAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOFootprintAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintAttachment(ctx context.Context, sel ast.SelectionSet, v *model.FootprintAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FootprintAttachment(ctx, sel, v)
}

func (ec *executionContext) marshalOFootprintCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx context.Context, sel ast.SelectionSet, v []*model.FootprintCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFootprintCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FootprintCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOFootprintCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐFootprintCategory(ctx context.Context, sel ast.SelectionSet, v *model.FootprintCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FootprintCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚕgithubᚗcomᚋbwmarrinᚋsnowflakeᚐIDᚄ(ctx context.Context, v interface{}) ([]snowflake.ID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]snowflake.ID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕgithubᚗcomᚋbwmarrinᚋsnowflakeᚐIDᚄ(ctx context.Context, sel ast.SelectionSet, v []snowflake.ID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2githubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚕᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx context.Context, v interface{}) ([]*snowflake.ID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*snowflake.ID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx context.Context, sel ast.SelectionSet, v []*snowflake.ID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx context.Context, v interface{}) (*snowflake.ID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql1.UnmarshalSnowflake(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖgithubᚗcomᚋbwmarrinᚋsnowflakeᚐID(ctx context.Context, sel ast.SelectionSet, v *snowflake.ID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql1.MarshalSnowflake(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOPart2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Part) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPart2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPart(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPartAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx context.Context, sel ast.SelectionSet, v []*model.PartAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPartAttachment2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PartAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPartAttachment2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartAttachment(ctx context.Context, sel ast.SelectionSet, v *model.PartAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PartAttachment(ctx, sel, v)
}

func (ec *executionContext) marshalOPartCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx context.Context, sel ast.SelectionSet, v []*model.PartCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPartCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PartCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPartCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategory(ctx context.Context, sel ast.SelectionSet, v *model.PartCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PartCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPartCategoryInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartCategoryInput(ctx context.Context, v interface{}) (*model.PartCategoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPartCategoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPartMeasurementUnit2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnitᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PartMeasurementUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPartMeasurementUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartMeasurementUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPartParameter2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx context.Context, sel ast.SelectionSet, v []*model.PartParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPartParameter2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PartParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPartParameter2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐPartParameter(ctx context.Context, sel ast.SelectionSet, v *model.PartParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PartParameter(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQuerySiPrefixInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐQuerySiPrefixInput(ctx context.Context, v interface{}) (*model.QuerySiPrefixInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQuerySiPrefixInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQueryUnitInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐQueryUnitInput(ctx context.Context, v interface{}) (*model.QueryUnitInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQueryUnitInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSiPrefix2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefixᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SiPrefix) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSiPrefix2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐSiPrefix(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStorageLocation2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx context.Context, sel ast.SelectionSet, v []*model.StorageLocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStorageLocation2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StorageLocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStorageLocation2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocation(ctx context.Context, sel ast.SelectionSet, v *model.StorageLocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StorageLocation(ctx, sel, v)
}

func (ec *executionContext) marshalOStorageLocationCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx context.Context, sel ast.SelectionSet, v []*model.StorageLocationCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStorageLocationCategory2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StorageLocationCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStorageLocationCategory2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategory(ctx context.Context, sel ast.SelectionSet, v *model.StorageLocationCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StorageLocationCategory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStorageLocationCategoryInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationCategoryInput(ctx context.Context, v interface{}) (*model.StorageLocationCategoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStorageLocationCategoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStorageLocationImage2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StorageLocationImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStorageLocationImage2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImage(ctx context.Context, sel ast.SelectionSet, v *model.StorageLocationImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StorageLocationImage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStorageLocationImageInput2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐStorageLocationImageInput(ctx context.Context, v interface{}) (*model.StorageLocationImageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStorageLocationImageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOUnit2ᚕᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnitᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Unit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUnit2ᚖgithubᚗcomᚋOmegaVoidᚋomegaᚑinventoryᚋpkgᚋmodelᚐUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
